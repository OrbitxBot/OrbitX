{
  "name": "Sun Agent(IWO)",
  "nodes": [
    {
      "parameters": {
        "model": "mistral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        20,
        -260
      ],
      "id": "80b2968c-a16d-42a6-bac1-4025ec570e9a",
      "name": "Mistral Cloud Chat Model",
      "credentials": {
        "mistralCloudApi": {
          "id": "by4PkQxjQffBAnGa",
          "name": "Mistral Cloud account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are the Coordinator Agent in a multi-agent workflow system.\nYour primary responsibility is to analyze incoming user messages and determine exactly which specialized agent should handle the request and which workflow name FROM THE LIST BELOW must be used.{{ $json.body.message }}\nYour Task:\n\nExamine conversation memory and determine if a workflow is already active for this session\nWORKFLOW CONTINUITY: If continuing an existing workflow (user providing details after you previously asked), maintain the SAME classification and workflow from your previous response - DO NOT re-classify\nIf starting new classification: Match the request to ONE category and ONE workflow ONLY from the list below\nIf a user's message directly mentions a keyword that matches a workflow name, you MUST select that exact workflow. DO NOT substitute it with a related workflow.\nIf the user message does not match exactly, pick the most relevant one from the list for that category.\nIf there is truly no match, use classification Fallback and workflow \"None\".\n\nAdditional Behavior:\n\nIf the user message includes structured details (like name, email, department, start date, manager, action, etc.) that clearly provide the required information for the matched workflow, pass this message forward as the final details to the next agent — do not re-classify or ask again.\nIn this case, still include the same classification, confidence, reasoning, session id and the matched workflow name exactly as normal.\nCRITICAL: If you are continuing an existing workflow (user providing details after you asked), maintain the SAME classification and workflow from your previous response.\n\nLook at the keywords for each workflow — if it matches, direct it towards that workflow!\nHere is the input message: {{ $json.body.message }}, Check the memory \nCategories and Allowed Workflows:\n\nHR:\n\nEmployee Onboarding and Offboarding\nPerformance Review Management\nGenerate Offer Letter\n\n\nMarketing:\n\nSocial Media\nContent Creation\nContent Publishing Automation\nSEO Optimization \n\nCRM:\n\nCustomer Lifecycle Automation\n\nSales:\n\nSales & Revenue Forecasting\nSales Reporting\nCustomer Analytics\n\n\nIT:\n\nGithub Push & Update File: Has no fields\nUser Access Provisioning (Github) : If any fields are given it is this workflow : \"github_username\": \"Hriday-17”\n\n\n\nResponse Format:\nProvide your response in this exact JSON format:\n{\n  \"classification\": \"[HR|Marketing|CRM|Sales|IT|Fallback]\",\n  \"confidence\": \"[High|Medium|Low]\",\n  \"reasoning\": \"Explain exactly why you chose this classification and workflow, showing which user keywords matched, or explain why you're continuing the existing workflow.\",\n  \"session_id\": \"{{ $json.body.sessionId }}\",\n  \"workflow\": \"[Exact workflow name from list above, or 'None' if Fallback]\",\n  \"message\": {{ $json.body.message }}\n}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        20,
        -440
      ],
      "id": "1104a170-fde8-43a1-942e-c17d88850b42",
      "name": "Sun(Coordinator Agent)"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are the HR Agent in a multi-agent workflow system. Your primary responsibility is to identify workflow requests, collect required information, and process HR-related tasks.\n\n## Workflow Recognition: \nCRITICAL: Recognize these workflow variations and treat them as the same request:\n\n- \"I want to execute Employee onboarding\"  = \"Employee Onboarding and Offboarding\" \n-  \"I want to execute Generate Offer Letter \" = = \"Generate Offer Letter\"\n-  \"I want to execute Performance Review Management\"  = \"Performance Review Management\"\n\n## Available Workflows\n\n### 1️⃣ Employee Onboarding and Offboarding\n**Trigger phrases**: \"employee onboarding\", \"employee offboarding\", \"onboarding\", \"offboarding\", \"onboard\", \"offboard\"\n**Required fields**:\n- name: Employee's full name\n- email: Work email address  \n- department: Team or department\n- start_date: Start date (YYYY-MM-DD format)\n- manager: Manager's name\n- action: Must be either \"onboard\" or \"offboard\"\n\n### 2️⃣ Generate Offer Letter  \n**Trigger phrases**: \"offer letter\", \"generate offer\", \"offer generation\"\n**Required fields**:\n- candidateEmail: Candidate's email address\n\n### 3️⃣ Performance Review Management\n**Trigger phrases**: \"performance review\", \"review management\", \"employee review\"\n**Required fields**:\n- EmployeeID: Unique employee ID\n- Name: Employee's full name\n- Email: Employee's email address\n- Designation: Job title\n- Department: Team or department  \n- ReviewPeriod: Review period (e.g., Q1 2025)\n- PerformanceRating: Performance rating\n- ManagerEmail: Manager's email address\n\n## PERMITTED OUTPUT RESPONSES ONLY : {{ $json.output.message }}\n\n**IMPORTANT**: You can ONLY respond with one of these exact response types. Do not deviate from these formats:\n\n### Response Type 1: Workflow Identified, Requesting Fields\n```\nI understand you want to execute [EXACT WORKFLOW NAME]. Please provide the following details:\n\n- field1: description\n- field2: description  \n- field3: description\n\nPlease provide all the information in your next message.\n```\n\n### Response Type 2: All Fields Complete, Processing Request\n```\n✅ Details received successfully for . Processing your request: [COPY USER'S EXACT MESSAGE WORD-FOR-WORD]\n```\n\n### Response Type 3: Missing Fields, Request Additional Information\n```\nI have some information but need the following additional details:\n\n- missing_field1: description\n- missing_field2: description\n\nPlease provide the missing information.\n```\n\n### Response Type 4: No Workflow Identified, Present Options\n```\nI can help you with these HR workflows:\n1. Employee Onboarding and Offboarding\n2. Generate Offer Letter  \n3. Performance Review Management\n\nWhich workflow would you like to execute?\n```\n\n### Response Type 5: Format Error Correction\n```\nThe [field_name] format is incorrect. Please provide the [field_name] in [correct_format] format.\n```\n\n### Response Type 6: Invalid Field Value\n```\nThe [field_name] must be either \"[option1]\" or \"[option2]\". Please provide the correct [field_name].\n```\n\nAccept any email without raising a flag .\n**CRITICAL**: You must NEVER: {{ $json.output.message }}\n- Generate explanatory text outside these response types\n- Create examples or dummy data\n- Provide additional context or tutorials\n- Ask multiple questions beyond the required fields\n- Switch response formats mid-conversation\n-Shouldnt tamper with the input message at all\n\n## Response Logic\n\n### STEP 1: Check Session Context FIRST\n**CRITICAL**: Before doing anything else, check the chat history:\n- If a workflow was already identified in this conversation, USE THAT WORKFLOW\n- Only identify new workflows if no previous workflow exists in the session\n- Never switch workflows mid-conversation unless explicitly requested\n\n### STEP 2: Field Pattern Detection : \nLook for field patterns in the user's message:\n- fieldname: followed by a value\n- fieldname = followed by a value  \n- fieldname - followed by a value\n\n### STEP 3: Session-Aware Processing\n- If field details provided + workflow already selected in session → Process with stored workflow\n- If field details provided + no workflow in session → Ask which workflow\n- If new workflow mentioned + previous workflow exists → Use the new one\n\n### STEP 4: Response Determination\nUse ONLY the permitted response types listed above based on the situation.\n\n## Critical Rules\n\n### ✅ DO:\n- **ALWAYS check chat history before processing any request**\n- Use the workflow that was already selected in the current conversation\n- Maintain consistency throughout the entire session\n- Only ask for workflow selection once per conversation\n- Process field details against the previously selected workflow\n- **Stick strictly to the permitted response formats**\n- Keep responses simple and direct\n\n### ❌ DO NOT:\n- **Switch workflows mid-conversation without explicit user request**\n- **Ignore previously selected workflows in the session**\n- Ask \"what workflow\" when one was already chosen\n- Process field details against wrong workflow\n- Forget session context between messages\n- Generate examples or dummy data\n- Create complicated explanations or walkthroughs\n- Add information not provided by the user\n- **Use any response format not listed in the permitted outputs**\n- **Provide additional explanations beyond the required response types**\n\n## Memory & Context\n- Use session context and chat history to remember selected workflows\n- If user provides field details without mentioning workflow, use previously selected workflow from conversation\n- Don't ask for workflow identification repeatedly within the same session\n- Maintain workflow context throughout the conversation\n\n## Error Handling\n- Use only the permitted error response types\n- If field format is wrong, use Response Type 5\n- If action field isn't \"onboard\" or \"offboard\", use Response Type 6\n- If date format is wrong, use Response Type 5 with YYYY-MM-DD specification\n  {{ $json.output.workflow }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1140,
        -1680
      ],
      "id": "9f1e62b5-1f7b-422e-92d1-cabbbff48c9a",
      "name": "HR Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are the Marketing Agent in a multi-agent workflow system. Your primary responsibility is to identify workflow requests, collect required information, and process Marketing-related tasks.\n\n## Workflow Recognition : {{ $json.output.workflow }}\nCRITICAL: Recognize these workflow variations and treat them as the same request:\n\n- \"I want to execute Content Publishing\" = \"Content Publishing\"  \n- \"I want to execute Content Publishing Automation\" = \"Content Publishing\"\n- \"I want to execute SEO Optimization\" = \"SEO Optimization\"\n\n## Available Workflows\n\n### 1️⃣ Content Publishing\n**Trigger phrases**: \"content publishing\", \"publish content\", \"content publish\", \"publishing\"\n**Required fields**:\n- No input fields required - This workflow executes automatically via API call\n\n### 2️⃣ SEO Optimization\n**Trigger phrases**: \"SEO optimization\", \"SEO optimize\", \"search engine optimization\", \"SEO project\"\n**Required fields**:\n- url: Website URL to optimize\n- email: Contact email address\n- project_name: Name of the SEO project\n\n## PERMITTED OUTPUT RESPONSES ONLY\n\n**IMPORTANT**: You can ONLY respond with one of these exact response types. Do not deviate from these formats: {{ $json.output.message }}\n\n### Response Type 1: Workflow Identified, Requesting Fields\n```\nI understand you want to execute {{ $json.output.workflow }}. Please provide the following details:\n\n- field1: description\n- field2: description  \n- field3: description\n\nPlease provide all the information in your next message.\n```\n\n### Response Type 2: All Fields Complete, Processing Request \n```\n✅ Details received successfully for [WORKFLOW NAME]. Processing your request: [COPY USER'S EXACT MESSAGE WORD-FOR-WORD]\n```\n\n### Response Type 3: Missing Fields, Request Additional Information\n```\nI have some information but need the following additional details:\n\n- missing_field1: description\n- missing_field2: description\n\nPlease provide the missing information.\n```\n\n### Response Type 4: No Workflow Identified, Present Options\n```\nI can help you with these Marketing workflows:\n1. Content Publishing\n2. SEO Optimization\n\nWhich workflow would you like to execute?\n```\n\n### Response Type 5: Format Error Correction\n```\nThe [field_name] format is incorrect. Please provide the [field_name] in [correct_format] format.\n```\n\n### Response Type 6: Invalid Field Value\n```\nThe [field_name] must be [expected_format]. Please provide the correct [field_name].\n```\n\n### Response Type 7: Email Format Confirmation\n```\nThe email format appears invalid. Please confirm the correct email address.\n```\n\n### Response Type 8: Content Publishing Auto-Execution\n```\n✅ Content Publishing workflow has started its execution automatically. No additional input required.\n```\n\n## OUTPUT FORMAT REQUIREMENTS {{ $json.output.message }}\n\n**CRITICAL**: Your responses must be in clean, natural text format. \n- DO NOT include any JSON formatting like `{'output': '...'}`\n- DO NOT include template variables like `{{ $json.output.workflow }}`\n- Output ONLY the clean response text as specified in the response types above\n- Remove any curly braces, quotes, or JSON structure from your output\n{{ $json.output.message }}\n**CRITICAL**: You must NEVER:\n- Generate explanatory text outside these response types\n- Create examples or dummy data\n- Provide additional context or tutorials\n- Ask multiple questions beyond the required fields\n- Switch response formats mid-conversation\n- **Output responses in JSON format or with template variables**\n- **Include curly braces, quotes, or structured data formatting**\n- **Use any `{'output': '...'}` or formatting**\n\n## Response Logic\n\n### STEP 1: Check Session Context FIRST\n**CRITICAL**: Before doing anything else, check the chat history:\n- If a workflow was already identified in this conversation, USE THAT WORKFLOW\n- Only identify new workflows if no previous workflow exists in the session\n- Never switch workflows mid-conversation unless explicitly requested\n\n### STEP 2: Field Pattern Detection\nLook for field patterns in the user's message:\n- fieldname: followed by a value\n- fieldname = followed by a value  \n- fieldname - followed by a value\n\n### STEP 3: Session-Aware Processing\n- If field details provided + workflow already selected in session → Process with stored workflow\n- If field details provided + no workflow in session → Ask which workflow\n- If new workflow mentioned + previous workflow exists → Use the new one\n\n### STEP 4: Response Determination\nUse ONLY the permitted response types listed above based on the situation.\n\n### STEP 5: Content Publishing Special Case\n- If \"Content Publishing\" is identified, immediately use Response Type 8\n- No field collection required for Content Publishing\n\n## Critical Rules\n\n### ✅ DO:\n- **ALWAYS check chat history before processing any request**\n- Use the workflow that was already selected in the current conversation\n- For Content Publishing, immediately confirm auto-execution\n- Maintain consistency throughout the entire session\n- Only ask for workflow selection once per conversation\n- Process field details against the previously selected workflow\n- **Stick strictly to the permitted response formats**\n- Keep responses simple and direct\n\n### ❌ DO NOT:\n- **Switch workflows mid-conversation without explicit user request**\n- **Ignore previously selected workflows in the session**\n- Ask \"what workflow\" when one was already chosen\n- Process field details against wrong workflow\n- Forget session context between messages\n- Generate examples or dummy data\n- Create complicated explanations or walkthroughs\n- Add information not provided by the user\n- **Use any response format not listed in the permitted outputs**\n- **Provide additional explanations beyond the required response types**\n- Ask for fields when Content Publishing is selected\n\n## Memory & Context : \n- Use session context and chat history to remember selected workflows\n- If user provides field details without mentioning workflow, use previously selected workflow from conversation\n- Don't ask for workflow identification repeatedly within the same session\n- Maintain workflow context throughout the conversation\n\n## Error Handling\n- Use only the permitted error response types\n- If URL format is wrong, use Response Type 5\n- If email format is invalid, use Response Type 7\n- If project_name is missing, use Response Type 3",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1400,
        -1100
      ],
      "id": "92491f78-f791-40ca-bb62-0b62ae503f3f",
      "name": "Marketing Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are the CRM Agent in a multi-agent workflow system. Your primary responsibility is to identify workflow requests, collect required information, and process CRM-related tasks.\n\n## Workflow Recognition : {{ $('Sun(Coordinator Agent)').item.json.output.workflow }} \nCRITICAL: Recognize these workflow variations and treat them as the same request:\n\n- \"I want to execute Customer Lifecycle\" = \"Customer Lifecycle\"\n- \"I want to execute CRM Customer Lifecycle\" = \"Customer Lifecycle\"\n- \"I want to execute Customer Management\" = \"Customer Lifecycle\"\n- \"Customer subscription management\" = \"Customer Lifecycle\"\n\n## Available Workflows\n\n### 1️⃣ Customer Lifecycle\n**Trigger phrases**: \"customer lifecycle\", \"customer management\", \"CRM\", \"customer subscription\", \"lifecycle management\"\n**Required fields**:\n- customer_name: Customer's full name\n- customer_email: Customer's email address\n- signup_date: Date when customer signed up (YYYY-MM-DD format)\n- Subscription: Subscription type or plan\n- message: Customer inquiry or message\n\n## PERMITTED OUTPUT RESPONSES ONLY\n\n**IMPORTANT**: You can ONLY respond with one of these exact response types. Do not deviate from these formats:\n\n### Response Type 1: Workflow Identified, Requesting Fields\n```\nI understand you want to execute [EXACT WORKFLOW NAME]. Please provide the following details:\n\n- field1: description\n- field2: description  \n- field3: description\n\nPlease provide all the information in your next message.\n```\n\n### Response Type 2: All Fields Complete, Processing Request\n```\n✅ Details received successfully for [WORKFLOW NAME]. Processing your request: [COPY USER'S EXACT MESSAGE WORD-FOR-WORD]\n```\n\n### Response Type 3: Missing Fields, Request Additional Information\n```\nI have some information but need the following additional details:\n\n- missing_field1: description\n- missing_field2: description\n\nPlease provide the missing information.\n```\n\n### Response Type 4: No Workflow Identified, Present Options\n```\nI can help you with the Customer Lifecycle workflow. Would you like to execute this workflow?\n```\n\n### Response Type 5: Format Error Correction\n```\nThe [field_name] format is incorrect. Please provide the [field_name] in [correct_format] format.\n```\n\n### Response Type 6: Invalid Field Value\n```\nThe [field_name] must be [expected_format]. Please provide the correct [field_name].\n```\n\n\n\n## OUTPUT FORMAT REQUIREMENTS : {{ $json.output.message }}\n\n**CRITICAL**: Your responses must be in clean, natural text format. \n- DO NOT include any JSON formatting like `{'output': '...'}`\n- DO NOT include template variables like `{{ $json.output.workflow }}`\n- Output ONLY the clean response text as specified in the response types above\n- Remove any curly braces, quotes, or JSON structure from your output\n\n**CRITICAL**: You must NEVER:\n- Generate explanatory text outside these response types\n- Create examples or dummy data\n- Provide additional context or tutorials\n- Ask multiple questions beyond the required fields\n- Switch response formats mid-conversation\n- **Output responses in JSON format or with template variables**\n- **Include curly braces, quotes, or structured data formatting**\n\n## Response Logic\n\n### STEP 1: Check Session Context FIRST\n**CRITICAL**: Before doing anything else, check the chat history:\n- If a workflow was already identified in this conversation, USE THAT WORKFLOW\n- Only identify new workflows if no previous workflow exists in the session\n- Never switch workflows mid-conversation unless explicitly requested\n\n### STEP 2: Field Pattern Detection\nLook for field patterns in the user's message:\n- fieldname: followed by a value\n- fieldname = followed by a value  \n- fieldname - followed by a value\n\n### STEP 3: Session-Aware Processing\n- If field details provided + workflow already selected in session → Process with stored workflow\n- If field details provided + no workflow in session → Ask which workflow\n- If new workflow mentioned + previous workflow exists → Use the new one\n\n### STEP 4: Response Determination\nUse ONLY the permitted response types listed above based on the situation.\n\n## Critical Rules\n\n### ✅ DO:\n- **ALWAYS check chat history before processing any request**\n- Use the workflow that was already selected in the current conversation\n- Maintain consistency throughout the entire session\n- Only ask for workflow selection once per conversation\n- Process field details against the previously selected workflow\n- **Stick strictly to the permitted response formats**\n- Keep responses simple and direct\n- Validate date format as YYYY-MM-DD\n- Validate email format\n\n### ❌ DO NOT:\n- **Switch workflows mid-conversation without explicit user request**\n- **Ignore previously selected workflows in the session**\n- Ask \"what workflow\" when one was already chosen\n- Process field details against wrong workflow\n- Forget session context between messages\n- Generate examples or dummy data\n- Create complicated explanations or walkthroughs\n- Add information not provided by the user\n- **Use any response format not listed in the permitted outputs**\n- **Provide additional explanations beyond the required response types**\n\n## Memory & Context\n- Use session context and chat history to remember selected workflows\n- If user provides field details without mentioning workflow, use previously selected workflow from conversation\n- Don't ask for workflow identification repeatedly within the same session\n- Maintain workflow context throughout the conversation\n\n## Error Handling\n- Use only the permitted error response types\n- If signup_date format is wrong, use Response Type 8\n- If email format is invalid, use Response Type 7\n- If customer_name is missing, use Response Type 3\n- If Subscription field is missing, use Response Type 3\n\n## Field Validation Rules\n- **customer_name**: Must be provided, cannot be empty\n- **customer_email**: Must be valid email format (contains @ and domain)\n- **signup_date**: Must be in YYYY-MM-DD format\n- **Subscription**: Must be provided (e.g., \"Gold\", \"Silver\", \"Premium\", etc.)\n- **message**: Customer inquiry or question, must be provided\n\n## Example Field Mapping\nWhen user provides data like in the JSON format:\n```json\n{\n  \"customer_name\": \"Hriday Macha\",\n  \"customer_email\": \"orbitx5613@gmail.com\", \n  \"signup_date\": \"2025-06-14\",\n  \"Subscription\": \"Gold\",\n  \"message\": \"Hi , how can i subscribe ?\"\n}\n```\n\nExtract and validate each field according to the rules above.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1440,
        140
      ],
      "id": "9468d54f-5b8d-4027-b8d2-005a2fe83f51",
      "name": "CRM Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are the IT Agent in a multi-agent workflow system. Your primary responsibility is to identify workflow requests, collect required information, and process IT-related tasks.\n\n## Workflow Recognition: {{ $json.output.workflow }}\nCRITICAL: Recognize these workflow variations and treat them as the same request:\n\n- \"I want to execute Github push\" = \"Github push, update file and monitor\"\n- \"I want to execute User Access Provisioning\" = \"User Access Provisioning (Github)\"\n- \"I want to execute Github Access\" = \"User Access Provisioning (Github)\"\n\n## Available Workflows\n\n### 1️⃣ Github push, update file and monitor\n**Trigger phrases**: \"\"push, \"push code\", \"update file\", \"file update\", \"code push\"\n**Required fields**: None (workflow executes automatically)\n\n### 2️⃣ User Access Provisioning (Github)  \n**Trigger phrases**: \"user access\", \"Github user access\", \"provision access\", \"access provisioning\", \"github permissions\", \"user permissions\"\n**Required fields**:\n- github_username: GitHub username to provision access for\n\n## PERMITTED OUTPUT RESPONSES ONLY\n\n**IMPORTANT**: You can ONLY respond with one of these exact response types. Do not deviate from these formats:\n\n### Response Type 1: Workflow Identified, Requesting Fields\n```\nI understand you want to execute [EXACT WORKFLOW NAME]. Please provide the following details:\n\n- field1: description\n- field2: description  \n- field3: description\n\nPlease provide all the information in your next message.\n```\n\n### Response Type 2: All Fields Complete, Processing Request\n```\n✅ Details received successfully for [EXACT WORKFLOW NAME]. Processing your request: [COPY USER'S EXACT MESSAGE WORD-FOR-WORD]\n```\n\n### Response Type 3: Missing Fields, Request Additional Information\n```\nI have some information but need the following additional details:\n\n- missing_field1: description\n- missing_field2: description\n\nPlease provide the missing information.\n```\n\n### Response Type 4: No Workflow Identified, Present Options\n```\nI can help you with these IT workflows:\n1. Github push, update file and monitor\n2. User Access Provisioning (Github)\n\nWhich workflow would you like to execute?\n```\n\n### Response Type 5: Format Error Correction\n```\nThe [field_name] format is incorrect. Please provide the [field_name] in [correct_format] format.\n```\n\n### Response Type 6: Invalid Field Value\n```\nThe [field_name] format appears invalid. Please provide the correct [field_name].\n```\n\n### Response Type 7: Username Format Confirmation\n```\nThe GitHub username format appears invalid. Please confirm the correct GitHub username.\n```\n\n**CRITICAL**: You must NEVER:\n- Generate explanatory text outside these response types\n- Create examples or dummy data\n- Provide additional context or tutorials\n- Ask multiple questions beyond the required fields\n- Switch response formats mid-conversation\n- Tamper with the input message at all\n\n## Response Logic : {{ $json.output.message }}\n\n### STEP 1: Check Session Context FIRST\n**CRITICAL**: Before doing anything else, check the chat history:\n- If a workflow was already identified in this conversation, USE THAT WORKFLOW\n- Only identify new workflows if no previous workflow exists in the session\n- Never switch workflows mid-conversation unless explicitly requested\n-\"github_username\": \"Hriday-17”\nif user replies with this field then its Github User Access workflow\n\n### STEP 2: Field Pattern Detection : \nLook for field patterns in the user's message:\n- fieldname: followed by a value\n- fieldname = followed by a value  \n- fieldname - followed by a value\n\n### STEP 3: Session-Aware Processing\n- If field details provided + workflow already selected in session → Process with stored workflow\n- If field details provided + no workflow in session → Ask which workflow\n- If new workflow mentioned + previous workflow exists → Use the new one\n\n### STEP 4: Response Determination\nUse ONLY the permitted response types listed above based on the situation.\n\n## Critical Rules\n\n### ✅ DO:\n- **ALWAYS check chat history before processing any request**\n- Use the workflow that was already selected in the current conversation\n- Maintain consistency throughout the entire session\n- Only ask for workflow selection once per conversation\n- Process field details against the previously selected workflow\n- **Stick strictly to the permitted response formats**\n- Keep responses simple and direct\n\n### ❌ DO NOT:\n- **Switch workflows mid-conversation without explicit user request**\n- **Ignore previously selected workflows in the session**\n- Ask \"what workflow\" when one was already chosen\n- Process field details against wrong workflow\n- Forget session context between messages\n- Generate examples or dummy data\n- Create complicated explanations or walkthroughs\n- Add information not provided by the user\n- **Use any response format not listed in the permitted outputs**\n- **Provide additional explanations beyond the required response types**\n\n## Memory & Context\n- Use session context and chat history to remember selected workflows\n- If user provides field details without mentioning workflow, use previously selected workflow from conversation\n- Don't ask for workflow identification repeatedly within the same session\n- Maintain workflow context throughout the conversation\n\n## Error Handling\n- Use only the permitted error response types\n- If field format is wrong, use Response Type 5\n- **NEVER validate GitHub username format - accept any provided username and pass it along**\n\n## Field Validation Rules\n- **github_username**: Accept any provided username without validation - pass through as provided",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1020,
        780
      ],
      "id": "50ef4cf5-befd-4479-a179-215326add713",
      "name": "IT Agent"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f3f91ad-c762-44eb-b04e-5e17822f1e8c",
              "leftValue": "={{ $json.output.classification }}",
              "rightValue": "=HR",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        620,
        -980
      ],
      "id": "4f48200b-d5c7-4940-bec5-ecf48ebd402d",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f3f91ad-c762-44eb-b04e-5e17822f1e8c",
              "leftValue": "={{ $json.output.classification }}",
              "rightValue": "Marketing",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        940,
        -780
      ],
      "id": "b46034ba-2b38-4ba5-9d2f-d82d42855dd0",
      "name": "If1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f3f91ad-c762-44eb-b04e-5e17822f1e8c",
              "leftValue": "={{ $json.output.classification }}",
              "rightValue": "Sales",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1040,
        -460
      ],
      "id": "18d2d660-cff8-46f3-9f76-01eb256f6b8e",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f3f91ad-c762-44eb-b04e-5e17822f1e8c",
              "leftValue": "={{ $json.output.classification }}",
              "rightValue": "CRM",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        940,
        -100
      ],
      "id": "8a37a26b-6ddf-46a9-a9b7-6fd772fd6edd",
      "name": "If3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4f3f91ad-c762-44eb-b04e-5e17822f1e8c",
              "leftValue": "={{ $json.output.classification }}",
              "rightValue": "IT",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        600,
        60
      ],
      "id": "3a1a4500-06b8-4951-afe8-3295977e75d7",
      "name": "If4"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "  {\n    \"classification\": \"\",\n    \"confidence\": \"\",\n    \"reasoning\": \"\",\n    \"session id\":\"\",\n    \"workflow\": \"\",\n    \"message\":\"\"\n  }"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        220,
        -260
      ],
      "id": "eec31d26-67ab-4c7d-b297-902b0826152e",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": "mistral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        1160,
        -1500
      ],
      "id": "b7e84315-2861-4d01-b79a-7915a41510b5",
      "name": "Mistral Cloud Chat Model1",
      "credentials": {
        "mistralCloudApi": {
          "id": "by4PkQxjQffBAnGa",
          "name": "Mistral Cloud account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "mistral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        1420,
        -960
      ],
      "id": "0990001f-f10e-4515-8ad9-6b19ebd68a95",
      "name": "Mistral Cloud Chat Model2",
      "credentials": {
        "mistralCloudApi": {
          "id": "by4PkQxjQffBAnGa",
          "name": "Mistral Cloud account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "mistral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        1540,
        -280
      ],
      "id": "3aa95dce-2fc5-4889-b299-08dd47c932b5",
      "name": "Mistral Cloud Chat Model3",
      "credentials": {
        "mistralCloudApi": {
          "id": "by4PkQxjQffBAnGa",
          "name": "Mistral Cloud account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "mistral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        1040,
        640
      ],
      "id": "89e5e284-b808-400f-ab6d-69b011c044b8",
      "name": "Mistral Cloud Chat Model4",
      "credentials": {
        "mistralCloudApi": {
          "id": "by4PkQxjQffBAnGa",
          "name": "Mistral Cloud account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "mistral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        1460,
        320
      ],
      "id": "670e6a3b-a1a0-4108-bb1a-a656e337a830",
      "name": "Mistral Cloud Chat Model5",
      "credentials": {
        "mistralCloudApi": {
          "id": "by4PkQxjQffBAnGa",
          "name": "Mistral Cloud account 2"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"message\": {{ $json.output ? JSON.stringify($json.output) : '\"No output available\"' }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1580,
        -1740
      ],
      "id": "b6710908-86eb-438e-baed-087c5d244293",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1800,
        -1000
      ],
      "id": "b9ce41c6-aee3-4b27-8ae3-5fed95711997",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1960,
        -260
      ],
      "id": "fe044816-898a-4d58-a937-4ae33077e881",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1940,
        380
      ],
      "id": "ed8b7b99-0783-4871-903f-166325c0d96e",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1560,
        1200
      ],
      "id": "e3bee43f-0938-4f3a-b7f3-471860725d9f",
      "name": "Respond to Webhook4"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bc11ea30-2807-4017-8b29-0db9581324e2",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -180,
        -440
      ],
      "id": "90aa9a5b-879a-43bf-9e4d-f125e29f840b",
      "name": "Webhook",
      "webhookId": "bc11ea30-2807-4017-8b29-0db9581324e2"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "channel": "=orbit_team\n\n",
        "text": "={{ $json.output.slackMessage }}\n",
        "otherOptions": {},
        "attachments": []
      },
      "id": "2398c69e-9586-4714-b416-5164c7f342fb",
      "name": "Slack - Onboard1",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        3640,
        -2620
      ],
      "credentials": {
        "slackOAuth2Api": {
          "id": "n4PtBRNo0fQVeezB",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $json.output.to }}\n",
        "subject": "={{ $json.output.emailSubject }}",
        "message": "={{ $json.output.emailBody }}",
        "options": {}
      },
      "id": "270da665-f699-484f-8990-a759d3769a3c",
      "name": "Gmail - Onboard1",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        3640,
        -2480
      ],
      "webhookId": "6e8c6a15-3722-44b9-a262-c67febb683a8",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "channel": "orbit_team",
        "text": "={{ $json.output.slackMessage }}\n",
        "otherOptions": {},
        "attachments": []
      },
      "id": "bc108642-8243-4446-b1c0-ff7256e0ea74",
      "name": "Slack -Offboard1",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        3640,
        -2180
      ],
      "credentials": {
        "slackOAuth2Api": {
          "id": "n4PtBRNo0fQVeezB",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $json.output.to }}",
        "subject": "={{ $json.output.emailSubject }}",
        "message": "={{ $json.output.emailBody }}\n",
        "options": {}
      },
      "id": "684bbf88-e07d-4b8b-98b4-0e7f92760a09",
      "name": "Gmail OffBoard1",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        3640,
        -2320
      ],
      "webhookId": "1168c557-1857-4c42-9d71-e4823b720ff3",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate a comprehensive onboarding message suite for a new employee using the structured format below.\n\n**Message Requirements:**\n\n**Slack Message (3-5 lines):**\n- Tone: Warm, welcoming, energetic, and casual\n- Content: Brief celebration of new hire with team mention\n- Style: Use emojis appropriately, keep conversational\n- Length: Maximum 3-5 lines to ensure readability in Slack\n\n**Email Body (5-7 lines):**\n- Tone: Professional yet friendly and welcoming\n- Content: Comprehensive welcome with key details\n- Formatting: Clean HTML with proper structure\n- Required Elements: Professional greeting with full name, explicit start date confirmation, manager introduction and reporting structure, department/team context, next steps or what to expect, professional sign-off with sender identification\n\n**Input Variables:**\n- Name: {{ $json.name }}\n- Email: {{ $json.email }}\n- Department: {{ $json.department }}\n- Start Date: {{ $json.start_date }}\n- Manager: {{ $json.manager }}\n\n**Output Format:**\nReturn ONLY a flat, valid JSON object with no markdown formatting, code blocks, or nested properties.\n\nRequired JSON structure:\n{\n  \"to\": \"recipient's email address\",\n  \"emailSubject\": \"compelling and professional subject line (8-12 words)\",\n  \"emailBody\": \"HTML-formatted welcome email with proper tags and structure (5-7 lines)\",\n  \"slackMessage\": \"engaging celebratory announcement with emojis and team mention (3-5 lines)\"\n}\n\n**Quality Guidelines:**\n- Personalization: Use the provided name and details naturally\n- Consistency: Maintain brand voice across both channels\n- Accessibility: Ensure HTML is properly formatted and readable\n- Engagement: Create excitement about joining the team\n- Clarity: Make next steps and expectations clear\n- Professionalism: Balance warmth with workplace appropriateness\n\nGenerate messages that make the new employee feel valued, informed, and excited to start their journey with the organization.",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "type": "AIMessagePromptTemplate",
              "message": "={{ $json.name }} has joined the {{ $json.department }} team.\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3260,
        -2540
      ],
      "id": "fe2c0f70-76d7-41ba-bceb-3a12d7778b7d",
      "name": "Basic LLM Chain2"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"to\": { \"type\": \"string\" },\n    \"emailSubject\": { \"type\": \"string\" },\n    \"emailBody\": { \"type\": \"string\" },\n    \"slackMessage\": { \"type\": \"string\" }\n  },\n  \"required\": [\"to\", \"emailSubject\", \"emailBody\", \"slackMessage\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        3420,
        -2660
      ],
      "id": "f9acf104-13af-4e11-81f2-959571c4cc09",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate a structured offboarding message suite for an exiting employee using the JSON format below.\nSlack Message (3–5 lines):\n\nTone: Appreciative, warm, brief, and team-aware\nContent: Farewell note, last day and department mention, gratitude\nStyle: Emoji-friendly and team-readable\n\nEmail Body (5–7 lines):\n\nTone: Respectful and professional\nContent: Acknowledge employee's departure, summarize contributions, provide offboarding date clarity, and offer best wishes\nFormatting: Clean HTML with appropriate structure\nInclude: Greeting, offboarding confirmation, farewell note, next steps if applicable, and sign-off\n\nInput Details:\n\nName: {{ $json.body.name }}\nEmail: {{ $json.body.email }}\nDepartment: {{ $json.body.department }}\nEnd Date: {{ $json.body.start_date }}\nManager: {{ $json.body.manager }}\n\nReturn ONLY this JSON:\n{\n\"to\": \"recipient's email\",\n\"emailSubject\": \"brief subject line for farewell\",\n\"emailBody\": \"HTML email string (5–7 lines)\",\n\"slackMessage\": \"Slack message string (3–5 lines)\"\n}\nNo explanations, markdown, or nesting.",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "type": "AIMessagePromptTemplate",
              "message": "={{ $json.body.name }} has been offboarded the {{ $json.body.department }} team."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3260,
        -2220
      ],
      "id": "5ce117a4-3be3-44fe-89d7-0acf08a7e04b",
      "name": "Basic LLM Chain3"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"to\": { \"type\": \"string\" },\n    \"emailSubject\": { \"type\": \"string\" },\n    \"emailBody\": { \"type\": \"string\" },\n    \"slackMessage\": { \"type\": \"string\" }\n  },\n  \"required\": [\"to\", \"emailSubject\", \"emailBody\", \"slackMessage\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        3420,
        -2360
      ],
      "id": "83ae9813-8855-497d-b8fc-3d1ebce92ad5",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8193160c-d34a-40a4-a50e-a7be8336b178",
              "leftValue": "={{ $json.action }}",
              "rightValue": "onboard",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "209099b8-5f65-4a63-9323-ab35369010af",
              "leftValue": "={{ $json.department }}",
              "rightValue": "Engineering",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2980,
        -2480
      ],
      "id": "62420d51-1e3a-407c-83e9-c115abf19103",
      "name": "If5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8193160c-d34a-40a4-a50e-a7be8336b178",
              "leftValue": "={{ $json.action }}",
              "rightValue": "offboard",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "4ec4397c-bd72-4b3d-a592-bb6a64c1f5f4",
              "leftValue": "={{ $json.department }}",
              "rightValue": "Engineering",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3000,
        -2280
      ],
      "id": "7c413f80-9186-4e52-b601-10785cfdc0ce",
      "name": "If6"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8193160c-d34a-40a4-a50e-a7be8336b178",
              "leftValue": "={{ $json.action }}",
              "rightValue": "offboard",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "8e684189-b165-41f3-afa7-b1c056fa7b22",
              "leftValue": "={{ $json.department }}",
              "rightValue": "Engineering",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3000,
        -2140
      ],
      "id": "b85a2058-3a12-447b-819c-c848569e567f",
      "name": "If7"
    },
    {
      "parameters": {
        "model": "=mistral-small",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        3260,
        -2660
      ],
      "id": "7dd9ca69-04f4-4886-ab3c-fceb9d048f14",
      "name": "Mistral Cloud Chat Model6",
      "credentials": {
        "mistralCloudApi": {
          "id": "MuuoznObfsdQDTbs",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        3280,
        -2360
      ],
      "id": "887b7190-d8aa-4145-b458-51b77311ac0d",
      "name": "Mistral Cloud Chat Model7",
      "credentials": {
        "mistralCloudApi": {
          "id": "MuuoznObfsdQDTbs",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "56c61648-c897-4dac-b1a9-df5e3ca3f71d",
              "leftValue": "={{ $json.action }}",
              "rightValue": "onboard",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "4a45cf58-b480-4e0e-afee-2aa36445f4cc",
              "leftValue": "={{ $json.department }}",
              "rightValue": "^[Ee]ngineering|ENGINEERING$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2980,
        -2600
      ],
      "id": "1717c884-84b1-42d3-bb01-7ebdb9e4fbbe",
      "name": "If8"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.output.session_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1300,
        -1500
      ],
      "id": "81fab2c4-e70c-46a8-892c-ec53a4854070",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.output.session_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1540,
        -920
      ],
      "id": "8e30d90b-d0ed-4a91-9031-5854999b20c2",
      "name": "Simple Memory1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1660,
        -280
      ],
      "id": "40a007e0-2eda-4266-b7e3-1b3a286634dc",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Sun(Coordinator Agent)').item.json.output.session_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1600,
        340
      ],
      "id": "0b34de3d-a6a3-40ab-95fa-b787a557d438",
      "name": "Simple Memory3"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.output.session_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1160,
        640
      ],
      "id": "2164d603-30ce-4f18-a964-894e66918597",
      "name": "Simple Memory4"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "2d16e7c4-acd6-464d-8e0a-e0e594c791e0"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2320,
        -360
      ],
      "id": "2c6a2e7d-cd1e-4b57-873d-481a3c5a0709",
      "name": "Switch"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1ciY-f6zgm3_cg_I8h923_LT5jSYvC3N1Q75715XcOrU/edit?gid=162664237#gid=162664237",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1ciY-f6zgm3_cg_I8h923_LT5jSYvC3N1Q75715XcOrU/edit?gid=162664237#gid=162664237",
          "mode": "url"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2880,
        -1880
      ],
      "id": "d427085f-8288-441f-b057-6cd0474b1682",
      "name": "Google Sheets2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "g5EWrONTPvqwZr7Q",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "=={{$json[\"ManagerEmail\"]}}\n",
        "subject": "=Bi-Annual Performance Review for {{$json[\"Name\"]}}\n",
        "message": "=Hi,\n\nPlease take a moment to complete the bi-annual performance review for <strong>{{$json[\"Name\"]}}</strong> using the form below:\n\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSc0sNPEefo2N_mePPOPNJKCRwsZUG5ezFKeAi0PJA88A1Qx6g/viewform?usp=header\">Performance Review Form</a>\n\nMake sure to include your feedback and rating to help HR finalize the review.\n\nThank you,<br>\nHR Team\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3100,
        -1880
      ],
      "id": "e8d578e1-58bc-4eb0-8f84-14ff7e4f3c35",
      "name": "Gmail1",
      "webhookId": "36941fc4-c0c8-4745-92ac-252bb01955d1",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "amount": 7
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3280,
        -1880
      ],
      "id": "915a0a97-7622-403b-ab4f-489aeff7ed68",
      "name": "Wait 7 Days1",
      "webhookId": "8faa22ff-6984-4862-988e-a94ff304cc9b"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "15nuqTg8Z9YyPB0_uG_pRR5NJlsYH2lFTsP0Ylo5uMz0",
          "mode": "list",
          "cachedResultName": "Manager Performance Review (Responses)",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/15nuqTg8Z9YyPB0_uG_pRR5NJlsYH2lFTsP0Ylo5uMz0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "mode": "id",
          "value": 1478322056
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        3460,
        -1880
      ],
      "id": "eb4850a8-3e9d-4c2a-a96b-748c6dbb3729",
      "name": "Google Sheets3",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "g5EWrONTPvqwZr7Q",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6b251412-bd69-48a4-a9fc-deac912f6a5d",
              "leftValue": "={{$json[\"Name\"]}}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3620,
        -1880
      ],
      "id": "4067f85a-dcf3-4eed-a073-a37c04e26350",
      "name": "If Response Submitted1"
    },
    {
      "parameters": {
        "sendTo": "=={{$json[\"Email\"]}}",
        "subject": "Your Performance Review is Complete",
        "message": "=Hi {{$json[\"Name\"]}},  Your manager has submitted your performance review.  Please contact HR if you'd like to discuss the results.  Best regards,<br> HR Team",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3840,
        -1940
      ],
      "id": "c270df74-1578-403d-9332-e0e323dac1d0",
      "name": "Notify employee1",
      "webhookId": "b090fdea-5205-4c89-b2b3-1cb04d160fa6",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{$json[\"ManagerEmail\"]}}",
        "subject": "=Pending Review for {{$json[\"Name\"]}}",
        "message": "=Reminder: The performance review for {{$json[\"Name\"]}} has not been submitted yet.  Please ensure it is completed as soon as possible.  Thank you,<br> Automated Review System",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3840,
        -1800
      ],
      "id": "a1697258-7cf0-473e-bd36-5710de82a709",
      "name": "Notify HR - Missing Review1",
      "webhookId": "3eb0774e-3bcc-43eb-8b08-72f670e2f778",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "765744cd-b5ba-45de-a96f-5427085d8806",
              "name": "EmployeeID",
              "value": "={{$json[\"body\"][\"EmployeeID\"]}}",
              "type": "string"
            },
            {
              "id": "1d7ea9e7-d49f-4845-9efb-696132023da3",
              "name": "Name",
              "value": "={{$json[\"body\"][\"Name\"]}}",
              "type": "string"
            },
            {
              "id": "4b60f8ee-2629-443f-ae52-7eca7a832543",
              "name": "Email",
              "value": "={{$json[\"body\"][\"Email\"]}}",
              "type": "string"
            },
            {
              "id": "712c3add-7af9-457b-8ec1-ced5799dccb2",
              "name": "Designation",
              "value": "={{$json[\"body\"][\"Designation\"]}}",
              "type": "string"
            },
            {
              "id": "0fb627d5-94fa-4022-be39-ad048ce81b3d",
              "name": "Department",
              "value": "={{$json[\"body\"][\"Department\"]}}",
              "type": "string"
            },
            {
              "id": "f5b83cf2-3e9c-436b-84a7-27b123d84f08",
              "name": "ReviewPeriod",
              "value": "={{$json[\"body\"][\"ReviewPeriod\"]}}",
              "type": "string"
            },
            {
              "id": "64d48e6f-56ee-4b8c-b306-92cfb16dba94",
              "name": "PerformanceRating",
              "value": "={{$json[\"body\"][\"PerformanceRating\"]}}",
              "type": "string"
            },
            {
              "id": "04a5a2fd-d2e1-4aeb-918e-f17c09b4c281",
              "name": "ManagerEmail",
              "value": "={{$json[\"body\"][\"ManagerEmail\"]}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2640,
        -1880
      ],
      "id": "ad3d12b3-51e7-456a-a577-86e3e9099613",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "jsCode": "// ✅ 1) Grab incoming message text\nconst msg = $input.first().json.response.body.message || \"\";\n\n// ✅ 2) Define required fields\nconst fields = [\"name\", \"email\", \"department\", \"start_date\", \"manager\", \"action\"];\n\n// ✅ 3) Initialize result & missing\nlet output = {};\nlet missing = [];\n\n// ✅ 4) Extract with safe pattern\nfields.forEach(f => {\n  // Accept : or = or -\n  const regex = new RegExp(`${f}\\\\s*[:=\\\\-]\\\\s*([^\\\\n]+)`, \"i\");\n  const m = msg.match(regex);\n  output[f] = m ? m[1].trim() : \"\";\n  if (!output[f]) missing.push(f);\n});\n\n// ✅ 5) Validate email, date, action\nconst emailValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(output.email);\nconst dateValid = /^\\d{4}-\\d{2}-\\d{2}$/.test(output.start_date);\nconst actionValid = /^(onboard|offboard)$/i.test(output.action);\n\n// ✅ 6) Set isComplete only if all checks pass\nconst isComplete = (\n  missing.length === 0 &&\n  emailValid &&\n  dateValid &&\n  actionValid\n);\n\n// ✅ 7) Return for downstream nodes\nreturn [\n  {\n    json: {\n      ...output,\n      emailValid,\n      dateValid,\n      actionValid,\n      missingFields: missing,\n      isComplete\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2460,
        -2380
      ],
      "id": "a53bd174-f907-4c2c-a552-2bae96c4abea",
      "name": "Extract Fields"
    },
    {
      "parameters": {
        "jsCode": "// Get the user message from the input data\nconst userMessage = $input.first().json.response.body.message || '';\n\n// Enhanced parsing function to extract employee data\nfunction parseEmployeeData(text) {\n  const employeeData = {};\n  \n  // Helper function to extract value after a label with better matching\n  function extractValue(patterns, fallback = '') {\n    for (const pattern of patterns) {\n      const match = text.match(pattern);\n      if (match && match[1] && match[1].trim()) {\n        return match[1].trim();\n      }\n    }\n    return fallback;\n  }\n  \n  // Extract Employee ID with multiple patterns\n  employeeData.EmployeeID = extractValue([\n    /(?:employee\\s*(?:id|number)|emp\\s*(?:id|#)|id):\\s*([^\\n,;]+)/i,\n    /(?:employee|emp)\\s*#\\s*([A-Z0-9-]+)/i,\n    /\\b(?:id|employee)\\s*[:\\-#]\\s*([A-Z0-9-]+)/i,\n    /\\(([A-Z]{2,}-?\\d+)\\)/i,\n    /^([A-Z]{2,}-?\\d+)\\s*-/m\n  ]);\n  \n  // Extract Name with better patterns\n  employeeData.Name = extractValue([\n    /(?:name|employee\\s*name|full\\s*name):\\s*([^\\n,;]+)/i,\n    /employee\\s+([A-Z][a-z]+\\s+[A-Z][a-z]+)/i,\n    /^([A-Z][a-z]+\\s+[A-Z][a-z]+(?:\\s+[A-Z][a-z]+)?)\\s*[-\\(]/m,\n    /(?:^|\\n)\\s*([A-Z][a-z]+\\s+[A-Z][a-z]+(?:\\s+[A-Z][a-z]+)?)\\s*$/m\n  ]);\n  \n  // Extract Email with comprehensive pattern\n  const emailPattern = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/;\n  const emailMatches = text.match(new RegExp(emailPattern.source, 'gi')) || [];\n  \n  employeeData.Email = extractValue([\n    /(?:email|e-mail|contact):\\s*([^\\s\\n,;]+@[^\\s\\n,;]+)/i\n  ]) || (emailMatches[0] || '');\n  \n  // Extract Manager Email (usually the second email found)\n  employeeData.ManagerEmail = extractValue([\n    /(?:manager\\s*email|supervisor\\s*email|reports\\s*to):\\s*([^\\s\\n,;]+@[^\\s\\n,;]+)/i,\n    /(?:manager|supervisor):\\s*([^\\s\\n,;]+@[^\\s\\n,;]+)/i\n  ]) || (emailMatches[1] || '');\n  \n  // Extract Designation/Title\n  employeeData.Designation = extractValue([\n    /(?:designation|title|position|role|job\\s*title):\\s*([^\\n,;]+)/i,\n    /(?:works\\s*as|is\\s*a|job\\s*title):\\s*([^\\n,;]+)/i,\n    /(?:^|\\n)\\s*(?:position|role):\\s*([^\\n,;]+)/i\n  ]);\n  \n  // Extract Department\n  employeeData.Department = extractValue([\n    /(?:department|dept|division|team):\\s*([^\\n,;]+)/i,\n    /(?:in|from)\\s+(?:the\\s+)?([A-Z][^\\n,;]*?)\\s+(?:department|dept|division|team)/i,\n    /works?\\s*in\\s*(?:the\\s+)?([A-Z][^\\n,;]*?)(?:\\s+(?:department|dept|division|team))?/i\n  ]);\n  \n  // Extract Review Period\n  employeeData.ReviewPeriod = extractValue([\n    /(?:review\\s*period|performance\\s*period|evaluation\\s*period):\\s*([^\\n,;]+)/i,\n    /(Q[1-4]\\s*\\d{4}|\\d{4}\\s*Q[1-4])/i,\n    /((?:january|february|march|april|may|june|july|august|september|october|november|december)\\s*\\d{4})/i,\n    /(?:period|quarter):\\s*([^\\n,;]+)/i\n  ]);\n  \n  // Extract Performance Rating\n  employeeData.PerformanceRating = extractValue([\n    /(?:performance\\s*rating|rating|score|evaluation):\\s*([^\\n,;]+)/i,\n    /(?:rated|scored):\\s*([^\\n,;]+)/i,\n    /(\\d+(?:\\.\\d+)?\\s*(?:\\/|out\\s*of)\\s*\\d+)/i,\n    /\\b(excellent|outstanding|good|satisfactory|needs\\s*improvement|poor)\\b/i,\n    /(\\d+(?:\\.\\d+)?%)/i\n  ]);\n  \n  return employeeData;\n}\n\n// Parse the employee data\nconst parsed = parseEmployeeData(userMessage);\n\n// Enhanced validation and formatting\nObject.keys(parsed).forEach(key => {\n  if (parsed[key]) {\n    // Clean up the values - remove unwanted characters but preserve important ones\n    let cleanValue = parsed[key].toString().trim();\n    \n    // Remove quotes and extra whitespace\n    cleanValue = cleanValue.replace(/^[\"']|[\"']$/g, '').replace(/\\s+/g, ' ');\n    \n    // Specific formatting for different field types\n    switch(key) {\n      case 'Email':\n      case 'ManagerEmail':\n        cleanValue = cleanValue.toLowerCase().replace(/[^a-z0-9@._-]/g, '');\n        break;\n        \n      case 'Name':\n      case 'Designation':\n      case 'Department':\n        // Title case formatting\n        cleanValue = cleanValue.toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase());\n        break;\n        \n      case 'EmployeeID':\n        // Keep alphanumeric, hyphens, and underscores\n        cleanValue = cleanValue.toUpperCase().replace(/[^A-Z0-9-_]/g, '');\n        break;\n        \n      case 'PerformanceRating':\n        // Keep ratings as-is but clean\n        cleanValue = cleanValue.replace(/[^\\w\\s.\\/%]/g, '');\n        break;\n        \n      case 'ReviewPeriod':\n        // Clean but preserve format\n        cleanValue = cleanValue.replace(/[^\\w\\s]/g, ' ').replace(/\\s+/g, ' ');\n        break;\n    }\n    \n    parsed[key] = cleanValue;\n  }\n});\n\n// Validation - ensure emails are valid\nfunction isValidEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nif (parsed.Email && !isValidEmail(parsed.Email)) {\n  parsed.Email = '';\n}\n\nif (parsed.ManagerEmail && !isValidEmail(parsed.ManagerEmail)) {\n  parsed.ManagerEmail = '';\n}\n\n// Debug output\nconsole.log('Input message:', userMessage);\nconsole.log('Parsed employee data:', parsed);\n\n// Return the structured data matching your n8n field mapping\nreturn {\n  json: {\n    body: {\n      EmployeeID: parsed.EmployeeID || '',\n      Name: parsed.Name || '',\n      Email: parsed.Email || '',\n      Designation: parsed.Designation || '',\n      Department: parsed.Department || '',\n      ReviewPeriod: parsed.ReviewPeriod || '',\n      PerformanceRating: parsed.PerformanceRating || '',\n      ManagerEmail: parsed.ManagerEmail || ''\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        -1880
      ],
      "id": "4783f16e-8730-44b4-b9ff-c2fe2a87f035",
      "name": "Extract fields"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "10-y2eohqVTn2lkCWdr6VyrDAeZqY9CZsb78Ak9HZoMA",
          "mode": "list",
          "cachedResultName": "Job applicants(Orbitx)",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/10-y2eohqVTn2lkCWdr6VyrDAeZqY9CZsb78Ak9HZoMA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 654304842,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/10-y2eohqVTn2lkCWdr6VyrDAeZqY9CZsb78Ak9HZoMA/edit#gid=654304842"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Email",
              "lookupValue": "={{ $json.candidateEmail }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2660,
        -1600
      ],
      "id": "bb3f0ece-12c9-4041-9c1a-15a90283d58f",
      "name": "Google Sheets1",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "g5EWrONTPvqwZr7Q",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.pdfmonkey.io/api/v1/documents",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer TvxvouhwyF3sgG-JzFzA"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ \n  JSON.stringify({\n    document: {\n      document_template_id: \"D8972875-263B-4BC7-8F1E-6C8020765684\",\n      payload: {\n        offer_letter_html: $json.offer_letter_html\n      },\n      \"status\": \"pending\"\n    }\n  }) \n}}\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3120,
        -1600
      ],
      "id": "b0752246-5a83-450a-9b82-735cfc298639",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "url": "=https://api.pdfmonkey.io/api/v1/documents/{{ $json.document.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer TvxvouhwyF3sgG-JzFzA"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3320,
        -1600
      ],
      "id": "e1058456-862a-4ad7-becf-08f9cba57fd2",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "sendTo": "={{ $('Code1').item.json.Email }}",
        "subject": "Your Official Offer Letter from Orbitx Team",
        "message": "=Hi {{ $('Google Sheets1').item.json.Name }},Find attached your official offer letter PDF.",
        "options": {
          "attachmentsUi": {
            "attachmentsBinary": [
              {
                "property": "={{ 'data' }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3720,
        -1600
      ],
      "id": "236f5982-5de5-454a-9688-a5e499ca9350",
      "name": "Gmail",
      "webhookId": "684ecfe9-cb90-4278-b462-ababb1c3fb81",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1️⃣ Get the raw message from webhook or HR Agent\nconst message = \n  $json.response?.body?.message ||\n  $json.body?.message ||\n  $json.message ||\n  '';\n\n// 2️⃣ Define default output\nlet candidateEmail = '';\n\n// 3️⃣ Try to parse: \n//   - If message is an object → check .candidateEmail\n//   - Else, use regex to find it in plain text\n\nif (typeof message === 'object') {\n  candidateEmail = message.candidateEmail || '';\n} else if (typeof message === 'string') {\n  const match = message.match(/candidateEmail\\s*[:=]\\s*([^\\s]+)/i);\n  candidateEmail = match ? match[1].trim() : '';\n}\n\n// 4️⃣ Return parsed field (or fallback)\nreturn [\n  {\n    json: {\n      candidateEmail: candidateEmail || 'Email not found'\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        -1600
      ],
      "id": "cd10d723-2eba-4237-9c51-f41be8c3fc14",
      "name": "Extract Fields2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "3b4396bb-e7ff-48d7-8677-426d07060991",
              "leftValue": "={{ $json.postToTwitter }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3980,
        -1140
      ],
      "id": "eb28e1f0-6c27-429f-8054-853d088371c4",
      "name": "If9"
    },
    {
      "parameters": {
        "url": "={{ $json.body.url }}",
        "options": {
          "redirect": {
            "redirect": {}
          },
          "timeout": 30000
        }
      },
      "id": "ccef37a9-8ae9-4418-a0ae-37f7afabd8ef",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2840,
        -740
      ]
    },
    {
      "parameters": {
        "jsCode": "// HTML Parser Code - n8n Compatible (No external dependencies)\n// Get HTML content from previous node\nconst htmlContent = $input.first().json.data;\n\n// Helper function to extract text between tags\nfunction extractTextBetweenTags(html, tagName) {\n  const regex = new RegExp(`<${tagName}[^>]*>([^<]*)<\\/${tagName}>`, 'gi');\n  const matches = [];\n  let match;\n  while ((match = regex.exec(html)) !== null) {\n    matches.push(match[1].trim());\n  }\n  return matches;\n}\n\n// Helper function to extract attribute value\nfunction extractAttribute(html, selector, attribute) {\n  const regex = new RegExp(`<${selector}[^>]*${attribute}=[\"']([^\"']*)[\"'][^>]*>`, 'i');\n  const match = html.match(regex);\n  return match ? match[1] : '';\n}\n\n// Helper function to count occurrences of a tag\nfunction countTags(html, tagName) {\n  const regex = new RegExp(`<${tagName}[^>]*>`, 'gi');\n  const matches = html.match(regex);\n  return matches ? matches.length : 0;\n}\n\n// Extract title\nconst titleMatch = htmlContent.match(/<title[^>]*>([^<]*)<\\/title>/i);\nconst title = titleMatch ? titleMatch[1].trim() : '';\n\n// Extract meta description\nlet description = '';\nconst metaDescRegex = /<meta[^>]*name=[\"']description[\"'][^>]*content=[\"']([^\"']*)[\"'][^>]*>/i;\nconst metaDescMatch = htmlContent.match(metaDescRegex);\nif (metaDescMatch) {\n  description = metaDescMatch[1];\n} else {\n  // Try og:description\n  const ogDescRegex = /<meta[^>]*property=[\"']og:description[\"'][^>]*content=[\"']([^\"']*)[\"'][^>]*>/i;\n  const ogDescMatch = htmlContent.match(ogDescRegex);\n  if (ogDescMatch) {\n    description = ogDescMatch[1];\n  }\n}\n\n// Extract keywords\nconst keywordsRegex = /<meta[^>]*name=[\"']keywords[\"'][^>]*content=[\"']([^\"']*)[\"'][^>]*>/i;\nconst keywordsMatch = htmlContent.match(keywordsRegex);\nconst keywords = keywordsMatch ? keywordsMatch[1] : '';\n\n// Extract H1 tags\nconst h1Tags = extractTextBetweenTags(htmlContent, 'h1');\n\n// Extract H2 tags\nconst h2Tags = extractTextBetweenTags(htmlContent, 'h2');\n\n// Count images\nconst totalImages = countTags(htmlContent, 'img');\n\n// Count images with alt text\nconst imgWithAltRegex = /<img[^>]*alt=[\"'][^\"']*[\"'][^>]*>/gi;\nconst imagesWithAltMatches = htmlContent.match(imgWithAltRegex);\nconst imagesWithAlt = imagesWithAltMatches ? imagesWithAltMatches.length : 0;\nconst imagesWithoutAlt = totalImages - imagesWithAlt;\n\n// Extract canonical URL\nconst canonicalRegex = /<link[^>]*rel=[\"']canonical[\"'][^>]*href=[\"']([^\"']*)[\"'][^>]*>/i;\nconst canonicalMatch = htmlContent.match(canonicalRegex);\nconst canonicalUrl = canonicalMatch ? canonicalMatch[1] : '';\n\n// Check for schema markup\nconst schemaRegex = /<script[^>]*type=[\"']application\\/ld\\+json[\"'][^>]*>/i;\nconst hasSchemaMarkup = schemaRegex.test(htmlContent);\n\n// Return structured data\nreturn {\n  url: $input.first().json.url || '',\n  title: title,\n  description: description,\n  keywords: keywords,\n  h1_tags: h1Tags,\n  h2_tags: h2Tags,\n  h1_count: h1Tags.length,\n  h2_count: h2Tags.length,\n  total_images: totalImages,\n  images_with_alt: imagesWithAlt,\n  images_without_alt: imagesWithoutAlt,\n  canonical_url: canonicalUrl,\n  has_schema_markup: hasSchemaMarkup,\n  content_length: htmlContent.length,\n  analyzed_at: new Date().toISOString()\n};"
      },
      "id": "2bc0526c-9326-4625-a26f-7afa4caed4d9",
      "name": "HTML Parser Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3060,
        -740
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process and format SEO data for reporting\nconst inputData = $input.all();\n\n// Debug: Log all input data to see what we're receiving\nconsole.log('=== DEBUG: All Input Data ===');\nconsole.log('Number of input items:', inputData.length);\ninputData.forEach((item, index) => {\n  console.log(`Input ${index}:`, JSON.stringify(item, null, 2));\n});\n\n// Try multiple ways to find the data\nlet htmlData = null;\nlet summaryData = null;\nlet analysisData = null;\n\n// Method 1: Look for HTML parsing data\nhtmlData = inputData.find(item => \n  item.json && (item.json.title !== undefined || item.json.url !== undefined)\n);\n\n// Method 2: Try to get data from specific nodes\ntry {\n  const htmlParserData = $('HTML Parser Code1').all();\n  console.log('HTML Parser Data:', htmlParserData);\n  if (htmlParserData && htmlParserData.length > 0) {\n    htmlData = htmlParserData[0];\n  }\n} catch (error) {\n  console.log('Could not get HTML Parser data:', error.message);\n}\n\n// Method 3: Look for AI-generated content\nsummaryData = inputData.find(item => \n  item.json && \n  item.json.message && \n  item.json.message.content && \n  item.json.message.content.length < 200\n);\n\nanalysisData = inputData.find(item => \n  item.json && \n  item.json.message && \n  item.json.message.content && \n  item.json.message.content.length > 200\n);\n\n// Method 4: Try to get AI data from OpenAI nodes\ntry {\n  const aiData = $('OpenAI').all();\n  console.log('OpenAI Data:', aiData);\n  if (aiData && aiData.length > 0) {\n    aiData.forEach((data, index) => {\n      const content = data.json?.message?.content || data.json?.choices?.[0]?.message?.content;\n      if (content) {\n        if (content.length < 200 && !summaryData) {\n          summaryData = data;\n        } else if (content.length >= 200 && !analysisData) {\n          analysisData = data;\n        }\n      }\n    });\n  }\n} catch (error) {\n  console.log('Could not get OpenAI data:', error.message);\n}\n\nconsole.log('=== Found Data ===');\nconsole.log('HTML Data found:', !!htmlData);\nconsole.log('Summary Data found:', !!summaryData);\nconsole.log('Analysis Data found:', !!analysisData);\n\n// Get project name from Edit Fields node\nlet projectName = 'Unnamed Project';\nlet websiteUrl = 'No URL provided';\n\ntry {\n  const editFieldsData = $('Edit Fields').first();\n  console.log('Edit Fields Data:', editFieldsData);\n  if (editFieldsData && editFieldsData.json) {\n    if (editFieldsData.json.project_name) {\n      projectName = editFieldsData.json.project_name;\n    }\n    if (editFieldsData.json.url) {\n      websiteUrl = editFieldsData.json.url;\n    }\n  }\n} catch (error) {\n  console.log('Could not retrieve data from Edit Fields node:', error.message);\n}\n\n// Try to get URL from HTTP Request node if not found in Edit Fields\nif (websiteUrl === 'No URL provided') {\n  try {\n    const httpData = $('HTTP Request1').first();\n    console.log('HTTP Request Data:', httpData);\n    if (httpData && httpData.json && httpData.json.url) {\n      websiteUrl = httpData.json.url;\n    }\n  } catch (error) {\n    console.log('Could not retrieve URL from HTTP Request node:', error.message);\n  }\n}\n\n// Format the processed data\nconst processedData = {\n  // Basic Info\n  url: websiteUrl,\n  title: htmlData?.json?.title || 'No title found',\n  description: htmlData?.json?.description || htmlData?.json?.meta_description || 'No description found',\n  keywords: htmlData?.json?.keywords || htmlData?.json?.meta_keywords || 'No keywords found',\n  \n  // Technical SEO Metrics\n  h1_count: htmlData?.json?.h1_tags?.length || htmlData?.json?.h1_count || 0,\n  h1_tags: htmlData?.json?.h1_tags?.join(', ') || htmlData?.json?.h1_tags || 'None',\n  h2_count: htmlData?.json?.h2_tags?.length || htmlData?.json?.h2_count || 0,\n  h2_tags: htmlData?.json?.h2_tags?.join(', ') || htmlData?.json?.h2_tags || 'None',\n  total_images: htmlData?.json?.total_images || htmlData?.json?.image_count || 0,\n  images_without_alt: htmlData?.json?.images_without_alt || htmlData?.json?.images_no_alt || 0,\n  images_with_alt: (htmlData?.json?.total_images || htmlData?.json?.image_count || 0) - (htmlData?.json?.images_without_alt || htmlData?.json?.images_no_alt || 0),\n  has_schema_markup: htmlData?.json?.has_schema_markup || htmlData?.json?.schema_markup || false,\n  canonical_url: htmlData?.json?.canonical_url || htmlData?.json?.canonical || 'Not found',\n  \n  // Content Analysis\n  content_length: htmlData?.json?.content_length || 0,\n  word_count: htmlData?.json?.word_count || 0,\n  \n  // AI Generated Content - handle different OpenAI response formats\n  summary: summaryData?.json?.message?.content || \n           summaryData?.json?.choices?.[0]?.message?.content || \n           summaryData?.json?.content ||\n           'Summary generation failed',\n  detailed_analysis: analysisData?.json?.message?.content || \n                    analysisData?.json?.choices?.[0]?.message?.content || \n                    analysisData?.json?.content ||\n                    'Analysis generation failed',\n  \n  // Metadata\n  analyzed_at: new Date().toISOString(),\n  analysis_date: new Date().toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }),\n  analysis_time: new Date().toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit'\n  }),\n  project_name: projectName\n};\n\n// Calculate SEO Score based on various factors\nlet seoScore = 0;\nconst scoringCriteria = [];\n\n// Title tag (20 points)\nif (processedData.title && processedData.title !== 'No title found') {\n  seoScore += 20;\n  scoringCriteria.push('✓ Title tag present');\n} else {\n  scoringCriteria.push('✗ Missing title tag');\n}\n\n// Meta description (20 points)\nif (processedData.description && processedData.description !== 'No description found') {\n  seoScore += 20;\n  scoringCriteria.push('✓ Meta description present');\n} else {\n  scoringCriteria.push('✗ Missing meta description');\n}\n\n// Keywords (15 points)\nif (processedData.keywords && processedData.keywords !== 'No keywords found') {\n  seoScore += 15;\n  scoringCriteria.push('✓ Keywords found');\n} else {\n  scoringCriteria.push('✗ No keywords found');\n}\n\n// H1 tags (15 points)\nif (processedData.h1_count > 0) {\n  seoScore += 15;\n  scoringCriteria.push(`✓ H1 tags present (${processedData.h1_count})`);\n} else {\n  scoringCriteria.push('✗ No H1 tags found');\n}\n\n// Image optimization (15 points)\nif (processedData.total_images > 0) {\n  if (processedData.images_without_alt === 0) {\n    seoScore += 15;\n    scoringCriteria.push('✓ All images have alt text');\n  } else {\n    const altPercentage = Math.round(((processedData.total_images - processedData.images_without_alt) / processedData.total_images) * 100);\n    seoScore += Math.round(15 * (altPercentage / 100));\n    scoringCriteria.push(`⚠ ${altPercentage}% of images have alt text`);\n  }\n} else {\n  scoringCriteria.push('- No images to analyze');\n}\n\n// Schema markup (15 points)\nif (processedData.has_schema_markup) {\n  seoScore += 15;\n  scoringCriteria.push('✓ Schema markup detected');\n} else {\n  scoringCriteria.push('✗ No schema markup found');\n}\n\n// Add calculated fields\nprocessedData.seo_score = Math.min(seoScore, 100); // Cap at 100\nprocessedData.seo_grade = seoScore >= 80 ? 'A' : \n                         seoScore >= 60 ? 'B' : \n                         seoScore >= 40 ? 'C' : 'D';\n\nprocessedData.seo_status = seoScore >= 80 ? 'Excellent' :\n                          seoScore >= 60 ? 'Good' :\n                          seoScore >= 40 ? 'Needs Improvement' : 'Poor';\n\nprocessedData.scoring_criteria = scoringCriteria;\n\n// Generate recommendations based on score\nconst recommendations = [];\nif (processedData.title === 'No title found') {\n  recommendations.push('Add a descriptive title tag (50-60 characters)');\n}\nif (processedData.description === 'No description found') {\n  recommendations.push('Add a compelling meta description (150-160 characters)');\n}\nif (processedData.h1_count === 0) {\n  recommendations.push('Add at least one H1 tag to structure your content');\n}\nif (processedData.images_without_alt > 0) {\n  recommendations.push(`Add alt text to ${processedData.images_without_alt} images for better accessibility`);\n}\nif (!processedData.has_schema_markup) {\n  recommendations.push('Consider adding schema markup for better search visibility');\n}\nif (processedData.keywords === 'No keywords found') {\n  recommendations.push('Add relevant keywords to improve search targeting');\n}\n\nprocessedData.recommendations = recommendations;\n\n// Log the processed data for debugging\nconsole.log('Processed SEO Data:', JSON.stringify(processedData, null, 2));\n\nreturn processedData;"
      },
      "id": "8e981217-bbbc-4045-96ec-356be15147b1",
      "name": "Data Processing1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3740,
        -760
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "bf2881aa-d90d-4c76-80b5-53dd2ec879e8",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        2640,
        -740
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a senior digital marketing consultant and SEO expert with over 10 years of experience in website optimization, content strategy, and search engine marketing. Your expertise spans technical SEO, content marketing, user experience optimization, and competitive analysis across diverse industries.\n\nTASK: Conduct a comprehensive SEO and digital marketing analysis of the provided website and generate both a concise executive summary and a detailed strategic report.\n\nANALYSIS FRAMEWORK:\nAnalyze the website using advanced SEO principles, current Google algorithm factors, user experience best practices, and modern digital marketing strategies. Consider technical SEO elements, content optimization, user intent alignment, and competitive positioning.\n\nPROVIDED WEBSITE DATA:\n- URL: {{ $json.url }}\n- Page Title: {{ $json.title || \"No title available\" }}\n- Meta Description: {{ $json.description || \"No description available\" }}\n- Meta Keywords: {{ $json.keywords || \"No keywords found\" }}\n- H1 Tags: {{ $json.h1_tags ? $json.h1_tags.join(\", \") : \"None found\" }} (Count: {{ $json.h1_count || 0 }})\n- H2 Tags Count: {{ $json.h2_count || 0 }}\n- Total Images: {{ $json.total_images || 0 }}\n- Images Missing Alt Text: {{ $json.images_without_alt || 0 }}\n- Canonical URL: {{ $json.canonical_url || \"Not specified\" }}\n- Schema Markup Present: {{ $json.has_schema_markup ? \"Yes\" : \"No\" }}\n- Content Length: {{ $json.content_length || 0 }} characters\n- Analysis Date: {{ new Date().toLocaleDateString() }}\n\nREQUIRED OUTPUT FORMAT:\n\n**EXECUTIVE SUMMARY** (Exactly 100 characters - this is critical for dashboard display):\n[Generate a compelling, action-oriented summary that captures the website's SEO status and primary opportunity in exactly 100 characters including spaces]\n\n**DETAILED ANALYSIS REPORT:**\n\n**1. SEO TECHNICAL AUDIT**\nEvaluate the technical SEO foundation including:\n- Title tag optimization (length, keyword placement, brand inclusion)\n- Meta description effectiveness (length, call-to-action, keyword integration)\n- Header structure optimization (H1 uniqueness, H2 hierarchy)\n- Image optimization status and accessibility compliance\n- Schema markup implementation and structured data opportunities\n- URL structure and canonical tag usage\n- Overall technical SEO score and priority fixes\n\n**2. CONTENT STRATEGY ANALYSIS**\nAssess content quality and optimization:\n- Content depth and comprehensiveness relative to topic\n- Keyword targeting strategy and search intent alignment\n- Content freshness and evergreen value potential\n- User engagement indicators based on content structure\n- Content gaps and expansion opportunities\n- Competitive content positioning insights\n\n**3. USER EXPERIENCE & ENGAGEMENT ASSESSMENT**\nAnalyze UX factors that impact SEO:\n- Content readability and structure\n- Visual hierarchy and information architecture\n- Mobile-first design considerations (inferred from structure)\n- Page loading optimization opportunities\n- User journey optimization potential\n- Conversion-focused design elements\n\n**4. AUDIENCE TARGETING & MARKET POSITIONING**\nDetermine target audience and market fit:\n- Primary audience demographics and psychographics (inferred from content)\n- Search behavior alignment and user intent matching\n- Industry vertical analysis and competitive landscape\n- Brand positioning and differentiation opportunities\n- Market trend alignment and future-proofing potential\n\n**5. GROWTH OPPORTUNITIES MATRIX**\nPrioritize improvement areas:\n\n**HIGH IMPACT, QUICK WINS:**\n- [List 3-4 immediate optimization opportunities]\n\n**MEDIUM IMPACT, STRATEGIC INVESTMENTS:**\n- [List 3-4 medium-term improvements]\n\n**LONG-TERM COMPETITIVE ADVANTAGES:**\n- [List 2-3 strategic initiatives for sustained growth]\n\n**6. COMPETITIVE STRENGTHS ANALYSIS**\nHighlight current advantages:\n- Existing SEO assets and content strengths\n- Technical implementation successes\n- Brand messaging and positioning wins\n- User experience advantages\n- Content differentiation factors\n\n**7. ACTIONABLE RECOMMENDATIONS**\nProvide specific, measurable next steps:\n\n**IMMEDIATE ACTIONS (Next 30 days):**\n1. [Specific action with expected impact]\n2. [Specific action with expected impact]\n3. [Specific action with expected impact]\n\n**STRATEGIC INITIATIVES (Next 90 days):**\n1. [Strategic initiative with success metrics]\n2. [Strategic initiative with success metrics]\n3. [Strategic initiative with success metrics]\n\n**PERFORMANCE BENCHMARKS:**\n- Current SEO Health Score: [X]/100\n- Expected improvement potential: [X]% increase in organic visibility\n- Priority ranking: [High/Medium/Low] based on competitive analysis\n- Investment level recommended: [Low/Medium/High] resource allocation\n\n**INDUSTRY CONTEXT & TRENDS:**\nProvide relevant industry insights and how this website aligns with current digital marketing trends, algorithm updates, and best practices.\n\nANALYSIS GUIDELINES:\n- If data is missing or incomplete, make intelligent inferences based on URL structure, available content, and industry standards\n- Provide specific, actionable recommendations rather than generic advice\n- Include quantitative assessments where possible (scores, percentages, rankings)\n- Consider mobile-first indexing, Core Web Vitals, and E-A-T factors in your analysis\n- Align recommendations with current Google algorithm priorities and ranking factors\n- Balance technical SEO with content strategy and user experience considerations\n\nOUTPUT REQUIREMENTS:\n- Executive Summary: Exactly 100 characters\n- Detailed Report: Comprehensive analysis following the above structure\n- Tone: Professional, authoritative, actionable\n- Format: Clear sections with bullet points and specific recommendations\n- Length: Thorough but concise, focusing on actionable insights over generic information",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3300,
        -800
      ],
      "id": "a6548f41-f98b-4054-9729-c4cd1ead035d",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        3400,
        -680
      ],
      "id": "b5197b7f-289b-427f-b159-b263c9f4a655",
      "name": "Mistral Cloud Chat Model9",
      "credentials": {
        "mistralCloudApi": {
          "id": "MuuoznObfsdQDTbs",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Ax6O88K23p7xAvKdyYS0tUJMBH78HeCLVaX0TheVRv0",
          "mode": "list",
          "cachedResultName": "SEO Analysis ",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Ax6O88K23p7xAvKdyYS0tUJMBH78HeCLVaX0TheVRv0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1938210286,
          "mode": "list",
          "cachedResultName": "Sheet 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Ax6O88K23p7xAvKdyYS0tUJMBH78HeCLVaX0TheVRv0/edit#gid=1938210286"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Title": "={{ $json.title }}",
            "Description": "={{ $json.description }}",
            "Keywords": "={{ $json.keywords }}",
            "H1 Tags": "={{ $json.h1_tags }}",
            "H2 Tags": "={{ $json.h2_tags }}",
            "Detailed Analysis": "={{ $json.detailed_analysis }}",
            "Summary": "={{ $json.summary }}",
            "SEO Score": "={{ $json.seo_score }}",
            "SEO Grade": "={{ $json.seo_grade }}",
            "Recommendations": "={{ $json.recommendations[0] }}&&{{ $json.recommendations[1] }}"
          },
          "matchingColumns": [
            "Title"
          ],
          "schema": [
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Description",
              "displayName": "Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Keywords",
              "displayName": "Keywords",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "H1 Tags",
              "displayName": "H1 Tags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "H2 Tags",
              "displayName": "H2 Tags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Detailed Analysis",
              "displayName": "Detailed Analysis",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Summary",
              "displayName": "Summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "SEO Score",
              "displayName": "SEO Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "SEO Grade",
              "displayName": "SEO Grade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Recommendations",
              "displayName": "Recommendations",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        3940,
        -760
      ],
      "id": "302b6e4d-2cba-42ce-a3b3-e10274ba256d",
      "name": "Google Sheets4",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "g5EWrONTPvqwZr7Q",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $('Edit Fields').item.json.body.email }}",
        "subject": "=SEO Report Ready - {{ $('Edit Fields').item.json.project_name || 'Website Analysis' }}",
        "message": "=Hi there,\n\nYour SEO analysis is now complete and ready for review. Here's a summary of your website's performance:\n\n📊 SEO Analysis Summary  \nTitle: {{ $json.Title }}  \nDescription: {{ $json.Description }}\n\n🧠 Detailed Insights  \nAnalysis: {{ $json['Detailed Analysis'] }}  \nSummary: {{ $json.Summary }}\n\n📈 Performance Metrics  \nSEO Score: {{ $('Data Processing1').item.json.seo_score }}/100  \nGrade: {{ $('Data Processing1').item.json.seo_grade }}\n\n💡 Recommendations  \n1. {{ $('Data Processing1').item.json.recommendations[0] }}  \n2. {{ $('Data Processing1').item.json.recommendations[1] }}\n\n📁 The full SEO report has been saved to Google Drive and can be accessed using the link provided in the “Google Drive Sharing” step.\n\nThank you for using Orbit Marketing Agent. We hope these insights help improve your website’s visibility and performance.\n\nWarm regards,  \nOrbit Marketing Agent\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        4180,
        -760
      ],
      "id": "d5c5bce6-1d9f-4e65-82a8-9dd2bec6cdf4",
      "name": "Gmail2",
      "webhookId": "7cea4d4b-2d5e-4f96-aef8-30bd71085eb1",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C091AKE8WAZ",
          "mode": "list",
          "cachedResultName": "marketing_team"
        },
        "text": "=SEO analysis for {{ $('Google Sheets4').item.json.Title }} under the {{ $('Webhook').item.json.body.project_name }}  is complete. The summary, score, grade, and recommendations were successfully generated and emailed to the user. The full detailed report has been uploaded to Google Drive. All content was published to the selected social platforms as per user input.",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        4400,
        -760
      ],
      "id": "f60e236d-d91c-4a69-9553-d80cfbd7e09a",
      "name": "Slack",
      "webhookId": "a8eb8811-9051-4c19-a6c7-5501eb3fa0a7",
      "credentials": {
        "slackOAuth2Api": {
          "id": "n4PtBRNo0fQVeezB",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "3b4396bb-e7ff-48d7-8677-426d07060991",
              "leftValue": "={{ $json.postToReddit }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3980,
        -1020
      ],
      "id": "f2adabee-3556-4aeb-87fc-aeba5008e785",
      "name": "If11"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "3b4396bb-e7ff-48d7-8677-426d07060991",
              "leftValue": "={{ $json.postToTelegram }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3980,
        -1280
      ],
      "id": "80f57afc-c335-40b8-9d07-5e1a96074acd",
      "name": "If10"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"twitter_post\": {\n      \"type\": \"string\",\n      \"description\": \"Twitter post under 280 characters with hashtags and CTA\"\n    },\n    \"telegram_post\": {\n      \"type\": \"string\",\n      \"description\": \"Telegram message 2-3 lines with friendly tone\"\n    },\n    \"reddit_post\": {\n      \"type\": \"string\",\n      \"description\": \"Reddit post conversational style with soft CTA\"\n    }\n  },\n  \"required\": [\"twitter_post\", \"telegram_post\", \"reddit_post\"],\n  \"additionalProperties\": false\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        3080,
        -1040
      ],
      "id": "8e1f96af-0103-410b-b136-a0802f932aaa",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": "mistral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        2920,
        -1040
      ],
      "id": "988c02b0-0b08-4306-8793-a80499ce70fa",
      "name": "Mistral Cloud Chat Model8",
      "credentials": {
        "mistralCloudApi": {
          "id": "MuuoznObfsdQDTbs",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1dwWsIRZv5vKvTLQQj2YafvwApoPMCTXHcLwS03xn0sE",
          "mode": "list",
          "cachedResultName": "Content_Automation",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dwWsIRZv5vKvTLQQj2YafvwApoPMCTXHcLwS03xn0sE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2010383431,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dwWsIRZv5vKvTLQQj2YafvwApoPMCTXHcLwS03xn0sE/edit#gid=2010383431"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2540,
        -1220
      ],
      "id": "760a5a03-a3ea-4357-bc4f-8cb1f1c41e27",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "g5EWrONTPvqwZr7Q",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C091AKE8WAZ",
          "mode": "list",
          "cachedResultName": "marketing_team"
        },
        "text": "=Message sent to:  {{ $json.postToTwitter ? 'Twitter ' : '' }} {{ $json.postToTelegram ? 'Telegram ' : '' }} {{ $json.postToReddit ? 'Reddit ' : '' }} ✅ Successfully published: {{ $('Checks Social media platform1').item.json.Title }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        4480,
        -1140
      ],
      "id": "ba0b63cb-a749-47ad-9345-b6f9ff6bc0c7",
      "name": "Slack1",
      "webhookId": "90ba6ff5-c346-4493-90db-0d850dd06bea",
      "credentials": {
        "slackOAuth2Api": {
          "id": "n4PtBRNo0fQVeezB",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://oauth.reddit.com/api/submit",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "sr",
              "value": "redditdev"
            },
            {
              "name": "title",
              "value": "{{ $json.Title }}"
            },
            {
              "name": "text",
              "value": "={{ $json.Reddit_Post }}\n"
            },
            {
              "name": "kind",
              "value": "link"
            },
            {
              "name": "url",
              "value": "={{ $json.Final_Image_URL }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4160,
        -1020
      ],
      "id": "1675b666-f079-484d-abf2-795a2e553e99",
      "name": "Reddit1",
      "credentials": {
        "oAuth2Api": {
          "id": "TZTaevzggoFURQTr",
          "name": "Reddit API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot7798293409:AAEurhk7gg-6APOKmz578MvXXbhlq52kKYA/sendMessage",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "@Orbitx_Team"
            },
            {
              "name": "text",
              "value": "={{ $json.Telegram }}"
            },
            {
              "name": "image",
              "value": "={{ $json.Final_Image_URL }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4160,
        -1280
      ],
      "id": "17f25371-06f3-4400-ba8e-5ce50bbab59b",
      "name": "Telegram1"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1dwWsIRZv5vKvTLQQj2YafvwApoPMCTXHcLwS03xn0sE",
          "mode": "list",
          "cachedResultName": "Content_Automation",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dwWsIRZv5vKvTLQQj2YafvwApoPMCTXHcLwS03xn0sE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 276109270,
          "mode": "list",
          "cachedResultName": "Published_Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1dwWsIRZv5vKvTLQQj2YafvwApoPMCTXHcLwS03xn0sE/edit#gid=276109270"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Twitter_Post": "={{ $json.output.twitter_post }}",
            "Title": "={{ $('Google Sheets').item.json.Title }}",
            "Category": "={{ $('Google Sheets').item.json.Category }}",
            "Platforms": "={{ $('Google Sheets').item.json.Platforms }}",
            "Upload_Date": "={{ $('Google Sheets').item.json.Upload_Date }}",
            "Final_Image_URL": "={{ $('Google Sheets').item.json.Image_URL }}",
            "Reddit_Post": "={{ $json.output.reddit_post }}",
            "Telegram": "={{ $json.output.telegram_post }}"
          },
          "matchingColumns": [
            "Title"
          ],
          "schema": [
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Category",
              "displayName": "Category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Platforms",
              "displayName": "Platforms",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Upload_Date",
              "displayName": "Upload_Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Reddit_Post",
              "displayName": "Reddit_Post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Telegram",
              "displayName": "Telegram",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Twitter_Post",
              "displayName": "Twitter_Post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Final_Image_URL",
              "displayName": "Final_Image_URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        3400,
        -1220
      ],
      "id": "cd4c0196-adf9-4a92-91fa-f9994522d4bb",
      "name": "Google Sheets(To log updated value)1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "g5EWrONTPvqwZr7Q",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const platforms = $json.Platforms.toLowerCase();\n\nreturn [\n  {\n    json: {\n      postToTwitter: platforms.includes(\"twitter\"),\n      postToTelegram: platforms.includes(\"telegram\"),\n      postToReddit: platforms.includes(\"reddit\"),\n      ...$json  // preserve all original input data\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3720,
        -1160
      ],
      "id": "5d254120-d40d-44d3-b901-c7798bf81c4b",
      "name": "Checks Social media platform1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a smart marketing content assistant. Your job is to write **clear, unique, and engaging social media posts** using the details below.\n\n**Details:**  \n- **Title:**  {{ $json.Title }}\n- **Content Summary:** {{ $json.Content }}\n- **Category:** {{ $json.Category }}\n- **Image URL:** {{ $json.Image_URL }}\n\n**Instructions:**\n\n1️⃣ **Twitter Post**  :\n- Generate different , unique content with difference everytime\n- Must be concise (max ~8 lines).  \n- Hook in first line.  \n- 1–2 relevant hashtags in context (not dumped at the end).  \n- Always end with a strong CTA (e.g., “Explore more 👉”, “Join the conversation 👇”).  \n- Should sound fresh — avoid repetition, generic phrases, or AI-ish tone.\n\n2️⃣ **Telegram Post**  \n- Tone: Warm and friendly.  \n- 2–3 lines only.  \n- Highlight the main insight or takeaway from the summary.  \n- End with “Read more 👉” or “Learn more below”.\n\n3️⃣ **Reddit Post**  \n- Tone: Conversational but professional.  \n- 4–6 full sentences — not bullet points.  \n- Start with a short context hook.  \n- Include a brief personal reflection or rhetorical question for engagement.  \n- End with a subtle CTA like “What do you think?” or “Curious to hear your thoughts!”\n\n**Output Requirements:**  \n✅ **Always respond ONLY with valid JSON in this exact format, no commentary, no extra text:**  \n```json\n{\n  \"twitter_post\": \"your Twitter post here\",\n  \"telegram_post\": \"your Telegram post here\",\n  \"reddit_post\": \"your Reddit post here\"\n}\n",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2900,
        -1220
      ],
      "id": "0a22a8db-fbe2-4fb4-8e98-2603d4f543e6",
      "name": "Basic LLM Chain1",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.twitter.com/2/tweets",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth1Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"{{ $json.Twitter_Post }} \"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4160,
        -1140
      ],
      "id": "3ec83685-2c4d-4d47-ac2c-464cb72046a5",
      "name": "Twitter1",
      "credentials": {
        "oAuth1Api": {
          "id": "Difm7Rv6VGtDkjqt",
          "name": "Twitter Api 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "18tcAgETe5PwcuH_lZ1Y08nHePA4HjBwMCKPDOk_UVI8",
          "mode": "list",
          "cachedResultName": "Customer Details",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/18tcAgETe5PwcuH_lZ1Y08nHePA4HjBwMCKPDOk_UVI8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1298471486,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/18tcAgETe5PwcuH_lZ1Y08nHePA4HjBwMCKPDOk_UVI8/edit#gid=1298471486"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Customer Name": "={{ $json.customer_name }}",
            "Email": "={{ $json.customer_email }}",
            "Signup Date": "={{ $json.signup_date }}",
            "Subscription ": "={{ $json.message }}"
          },
          "matchingColumns": [
            "Customer Name"
          ],
          "schema": [
            {
              "id": "Customer Name",
              "displayName": "Customer Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Signup Date",
              "displayName": "Signup Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Subscription ",
              "displayName": "Subscription ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2720,
        540
      ],
      "id": "37b4826d-e676-4a56-8b0a-626ce42f6a13",
      "name": "Customer Details1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "g5EWrONTPvqwZr7Q",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $json.Email }}",
        "subject": "=Welcome to Our Service, {{ $json['Customer Name'] }}!",
        "message": "=Greetings,<br><br>\nThank you for subscribing to our service! We’re excited to have you on board.<br><br>\nYour subscription type: <strong>{{ $json['Subscription '] }}</strong><br><br>\nIf you have any questions, feel free to reach out anytime.<br><br>\nBest regards,<br>\nThe Support Team\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2940,
        540
      ],
      "id": "18db3fe3-525b-4cc3-9d4b-c73d815957af",
      "name": "Greetings mail1",
      "webhookId": "7e65f74f-96e9-4eab-8c0b-7ef91a0496ed",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an intelligent, friendly customer care assistant for OrbitX, a company that provides workflow automation as a service for businesses of all sizes.\n\nYour job is to answer customer questions clearly, politely, and accurately. \nYou can help with topics like:\n- Explaining what workflow automation is\n- Describing how our service works\n- Giving examples of what processes can be automated\n- Helping with common setup or onboarding questions\n- Directing users to support if you can't answer something\n\nAlways keep answers short, clear, and non-technical if the user seems non-technical.\nIf you do not know the answer, politely say you will connect them to a human agent.\n\nHere is the customer’s message:\n{{ $json.chatInput }}\n",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        3440,
        300
      ],
      "id": "481f49a7-e900-403b-97fc-9da6336bba43",
      "name": "ChatBot1"
    },
    {
      "parameters": {
        "sendTo": "={{ $('Customer Details1').item.json.Email }}",
        "subject": "=We’ve Answered Your Question: \"{{ $('Webhook').item.json.body.message }}\"",
        "emailType": "text",
        "message": "=Heyy {{ $('Customer Details1').item.json['Customer Name']  }} ,  Thank you for your question! Here’s the information you requested: {{ $json.reply }} If you have any more questions or need further assistance, feel free to reply to this email.  Best regards,   OrbitX Support Team",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3940,
        380
      ],
      "id": "602b48ad-9c53-4fa7-9f4b-6b3c3839320c",
      "name": "ChatBot Response1",
      "webhookId": "0a0863ab-acba-4fbe-bd46-6c303e18a99a",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3460,
        560
      ],
      "id": "9e300c1b-1a1b-4e8b-9ae6-270919feef09",
      "name": "Wait 3 days1",
      "webhookId": "317871da-2ae6-4b95-a32f-224ea5281918"
    },
    {
      "parameters": {
        "amount": 7
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3460,
        720
      ],
      "id": "a5fd84dd-06d6-49dd-9ef7-7fe6bd69e88a",
      "name": "Wait 7 days1",
      "webhookId": "3407e560-43fd-40d9-ab4b-59d483e858ef"
    },
    {
      "parameters": {
        "sendTo": "={{ $('Customer Details1').item.json.Email }}",
        "subject": "=Just Checking In — Any Questions So Far?\n",
        "emailType": "text",
        "message": "=Hi {{ $json.customer_name }},\n\nWe hope you're enjoying getting started with OrbitX! Just checking in to see if you have any questions or need any help.\n\nFeel free to reply to this email anytime — we’re always here for you.\n\nBest,  \nOrbitX Support Team\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3840,
        560
      ],
      "id": "f4c2456d-8620-4a26-b4a7-69aa2fbe74e8",
      "name": "Follow up mail (3days)1",
      "webhookId": "0a0863ab-acba-4fbe-bd46-6c303e18a99a",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $('Customer Details1').item.json.Email }}",
        "subject": "=Tips to Make the Most of Your OrbitX Service\n",
        "emailType": "text",
        "message": "=Hi {{ $json.customer_name }},\n\nIt’s been a week since you joined OrbitX — here are a few quick tips to help you get the most out of your workflow automations:\n\n- Explore our help center for step-by-step guides.\n- Try automating simple tasks like notifications or reminders.\n- Reach out to us if you’d like advice tailored for your business.\n\nWe’re here to help you succeed!\n\nCheers,  \nOrbitX Support Team\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3840,
        720
      ],
      "id": "941270b5-6a66-4dc9-8178-a4642083f771",
      "name": "Follow up mail (7 days)1",
      "webhookId": "0a0863ab-acba-4fbe-bd46-6c303e18a99a",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ca761116-e432-424d-bb31-0db35216f554",
              "leftValue": "={{ $('Webhook').item.json.body.message }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3160,
        540
      ],
      "id": "162691ac-4e5a-4c54-af0f-0934fcdab1dc",
      "name": "If12"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        3500,
        440
      ],
      "id": "10017608-e229-4ed6-a400-15a437de8433",
      "name": "Mistral Cloud Chat Model10",
      "credentials": {
        "mistralCloudApi": {
          "id": "by4PkQxjQffBAnGa",
          "name": "Mistral Cloud account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "046cb625-59fc-4335-b2b8-1d44c8f1f926",
              "name": "reply",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3740,
        380
      ],
      "id": "9cb7aac4-6dac-4f3d-ac9e-43f2b1c60493",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C0910N4PT7H",
          "mode": "list",
          "cachedResultName": "crm_team"
        },
        "text": "Heads up team: A follow-up automation just ran successfully for a customer. Please check the CRM or email logs if you need details. ",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        4220,
        560
      ],
      "id": "85db68c7-3b20-473b-a8d7-9ffed51cf295",
      "name": "Slack2",
      "webhookId": "566afab1-fcc2-4032-9470-714876b17911",
      "credentials": {
        "slackOAuth2Api": {
          "id": "n4PtBRNo0fQVeezB",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Simple parser for n8n Extract Fields node\n// Returns an array of objects as required by n8n\n\n// Get the input data from the previous node\nconst inputData = $input.all();\n\n// Process each item and return parsed data\nconst results = [];\n\nfor (const item of inputData) {\n  try {\n    // Extract the data from the item\n    const data = item.json;\n    \n    // Create parsed object with the required fields\n    const parsedItem = {\n      url: data.url || '',\n      email: data.email || '',\n      project_name: data.project_name || '',\n      parsed_at: new Date().toISOString(),\n      success: true\n    };\n    \n    results.push(parsedItem);\n    \n  } catch (error) {\n    // Handle errors and still return an object\n    results.push({\n      error: error.message,\n      success: false,\n      parsed_at: new Date().toISOString()\n    });\n  }\n}\n\n// Return the array of objects (required by n8n)\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        -740
      ],
      "id": "ecb36070-5041-4a4a-8fb8-3d8930714250",
      "name": "Extract Fields3"
    },
    {
      "parameters": {
        "jsCode": "return {\n  json: {\n    candidateEmail: $json.body?.candidateEmail || $json.candidateEmail\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2660,
        -360
      ],
      "id": "a8dd1a5e-619d-4b04-be63-dba591f5d975",
      "name": "Extract Fields4"
    },
    {
      "parameters": {
        "jsCode": "// Simple regex parser for CRM response\nconst text = $input.first().json.response.body.output|| $json.body || '';\n\nreturn {\n  json: {\n    customer_name: (text.match(/customer_name:\\s*([^]+?)(?=\\s+customer_email:)/)?.[1] || '').trim() || null,\n    customer_email: (text.match(/customer_email:\\s*([^]+?)(?=\\s+signup_date:)/)?.[1] || '').trim() || null,\n    signup_date: (text.match(/signup_date:\\s*([^]+?)(?=\\s+Subscription:)/)?.[1] || '').trim() || null,\n    Subscription: (text.match(/Subscription:\\s*([^]+?)(?=\\s+message:)/)?.[1] || '').trim() || null,\n    message: (text.match(/message:\\s*(.+)/)?.[1] || '').trim() || null\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2440,
        560
      ],
      "id": "74ae1a30-a58b-4bea-9ded-77ff702f199a",
      "name": "Extract Fields5"
    },
    {
      "parameters": {
        "jsCode": "return {\n  json: {\n    github_username: (() => {\n      const output =  $input.first().json.response.body.output|| '';\n      const usernameMatch = output.match(/github_username:\\s*([^\\s,]+)/);\n      return usernameMatch ? usernameMatch[1] : null;\n    })()\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        1060
      ],
      "id": "c89f33d4-1081-43cb-ba10-a7ae12ebbb5c",
      "name": "Extract Fields6"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.github.com/repos/OrbitxBot/Test-Repo/collaborators/{{ $json.username }}\n",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Accept",
              "value": "application/vnd.github+json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"permission\": \"{{ $json.access }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2680,
        1060
      ],
      "id": "7201901e-048a-4393-9678-dc85dc5fdd59",
      "name": "Add GitHub Collaborator1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1qMRJhVIjjSgwRagr-_aUqZ1t-F0hQn4HjQBsv0NKQ0U",
          "mode": "list",
          "cachedResultName": "Github_TeamData",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1qMRJhVIjjSgwRagr-_aUqZ1t-F0hQn4HjQBsv0NKQ0U/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2012377266,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1qMRJhVIjjSgwRagr-_aUqZ1t-F0hQn4HjQBsv0NKQ0U/edit#gid=2012377266"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "GitHub Username",
              "lookupValue": "={{ $json.body.github_username }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        2280,
        1060
      ],
      "id": "2abd7737-2174-4bc3-9a82-25c8aee4d3ce",
      "name": "Google Sheets5",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "g5EWrONTPvqwZr7Q",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Filter rows with valid request types: Add, Remove, Modify\nconst validTypes = ['Add', 'Remove', 'Modify'];\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const row = item.json;\n\n  if (\n    row['Request Type'] &&\n    validTypes.includes(row['Request Type'].trim()) &&\n    row['GitHub Username'] &&\n    row['Access Level'] &&\n    row['Repository Name']\n  ) {\n    results.push({\n      json: {\n        name: row['Name'],\n        email: row['Email'],\n        username: row['GitHub Username'],\n        requestType: row['Request Type'],\n        access: row['Access Level'],\n        repo: row['Repository Name'],\n        justification: row['Justification'] || 'No justification provided',\n      },\n    });\n  }\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        1060
      ],
      "id": "6deb1807-6d87-466c-9103-3875ce2e4e1a",
      "name": "Code"
    },
    {
      "parameters": {
        "sendTo": "={{ $('Code').item.json.email }}",
        "subject": "GitHub Access Invitation",
        "message": "=Hi {{ $('Code').item.json.name }},<br><br> You’ve been invited to collaborate on the <b>{{ $json.repository.name }}</b> repository.<br> Please <a href=\"{{ $json.html_url }}\">click here to accept the invitation</a>.<br><br> Thanks,<br> IT Team",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2880,
        1060
      ],
      "id": "d0f37283-885d-4b82-a633-36b0884c42a7",
      "name": "Gmail3",
      "webhookId": "a39efb52-38e1-49ee-9f29-4a6cea7ba059",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C091VSXP22C",
          "mode": "list",
          "cachedResultName": "it_team"
        },
        "text": "=🎉  {{ $('Code').item.json.name }} has been added as a collaborator to the repository \"{{ $('Add GitHub Collaborator1').item.json.repository.name }}\" with {{ $('Code').item.json.access }} permissions.",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        3040,
        1060
      ],
      "id": "5b6be032-d1e4-4636-aeb8-1bc0befab504",
      "name": "Slack3",
      "webhookId": "e487fa41-d6fa-42da-96f2-10feb72631a0",
      "credentials": {
        "slackOAuth2Api": {
          "id": "n4PtBRNo0fQVeezB",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('config1').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('config1').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('config1').item.json.file_path }}",
        "fileContent": "={{ $json.decoded_content }}\n## Updated at:\n{{ $now.toISO() }}",
        "commitMessage": "updated from n8n via GitHub node"
      },
      "id": "2ef3fc1d-338e-4f45-961c-1fb788c1ddf8",
      "name": "GitHub push edited file1",
      "type": "n8n-nodes-base.github",
      "position": [
        2940,
        1340
      ],
      "typeVersion": 1,
      "webhookId": "9d81d6b5-7e1b-4da2-a44d-28401d568f31",
      "credentials": {
        "githubOAuth2Api": {
          "id": "QARisOzbvBOssU7W",
          "name": "GitHub account 2"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "repo_owner",
              "value": "OrbitxBot"
            },
            {
              "name": "repo_name",
              "value": "Test-Repo"
            },
            {
              "name": "file_path",
              "value": "README.md"
            },
            {
              "name": "commit_message",
              "value": "Updated README.md via automation"
            }
          ]
        },
        "options": {}
      },
      "id": "063eddde-8f9b-445c-9d4a-4f1130df9071",
      "name": "config1",
      "type": "n8n-nodes-base.set",
      "position": [
        2260,
        1340
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $json.file_path }}",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "b8276fb4-b403-4be9-8e71-ba8aebd9935f",
      "name": "GitHub get file1",
      "type": "n8n-nodes-base.github",
      "position": [
        2480,
        1340
      ],
      "typeVersion": 1,
      "webhookId": "0d1cde6b-4ba4-4d2a-b9b9-7ebb72da8868",
      "credentials": {
        "githubOAuth2Api": {
          "id": "QARisOzbvBOssU7W",
          "name": "GitHub account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const base64 = $json.content;\nconst decoded = Buffer.from(base64, 'base64').toString('utf8');\n\nreturn [{\n  json: {\n    decoded_content: decoded\n  }\n}];\n"
      },
      "id": "b67eb0b2-2211-448d-a9ed-2f51a4b56099",
      "name": "Decode file1",
      "type": "n8n-nodes-base.code",
      "position": [
        2720,
        1340
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "return {\n  json: {\n    candidateEmail: $json.body?.candidateEmail || $json.candidateEmail\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2060,
        1340
      ],
      "id": "2af9bd75-e1a0-45b2-b966-ea46c3492c32",
      "name": "Extract Fields7"
    },
    {
      "parameters": {
        "content": "## **HR Agent (Performance review management)**",
        "height": 260,
        "width": 1680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2360,
        -1960
      ],
      "typeVersion": 1,
      "id": "90d64b00-218e-4b9e-8d86-242da8f0fffa",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## HR Agent\n",
        "height": 400,
        "width": 300,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1120,
        -1740
      ],
      "typeVersion": 1,
      "id": "7769a51e-233f-4473-9797-79e929b3d4ca",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## **HR Agent (Employee onboarding and offboarding)**",
        "height": 660,
        "width": 1620,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2360,
        -2680
      ],
      "typeVersion": 1,
      "id": "49443767-69b2-4641-8557-42aa853f3c10",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## **HR Agent (Generate Offer Letter)**",
        "height": 200,
        "width": 1680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2360,
        -1660
      ],
      "typeVersion": 1,
      "id": "e6a07594-adec-42dd-a583-330cc3146596",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Marketing Agent\n",
        "height": 400,
        "width": 300,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1380,
        -1180
      ],
      "typeVersion": 1,
      "id": "21e3b46b-b358-4d1f-9dc1-255737a316ff",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## **Marketing Agent (Content Publishing)**",
        "height": 500,
        "width": 2340,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2360,
        -1360
      ],
      "typeVersion": 1,
      "id": "4ad27698-a8c8-407e-96a6-fc65a9cd11b5",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## **Marketing Agent (SEO Optimization)**",
        "height": 240,
        "width": 2340,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2360,
        -820
      ],
      "typeVersion": 1,
      "id": "34b61474-3f75-422e-9452-a91ced22133b",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## Sales & Analytics Agent\n",
        "height": 400,
        "width": 300,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1500,
        -540
      ],
      "typeVersion": 1,
      "id": "72225ba6-9528-4555-957f-f02d62a2d998",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "## Sales & Analytics Agent",
        "height": 480,
        "width": 1620,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2540,
        -440
      ],
      "typeVersion": 1,
      "id": "706dea07-96ad-4d04-bd78-c3429a841db0",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1520,
        -480
      ],
      "id": "1191f030-57e5-43b7-9c55-ad939c20a28f",
      "name": "Sales & Analytics Agent"
    },
    {
      "parameters": {
        "content": "## CRM Agent\n",
        "height": 400,
        "width": 300,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1420,
        60
      ],
      "typeVersion": 1,
      "id": "d0d5b357-b6b4-4ef2-b6da-2b910127f4c5",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## IT Agent\n",
        "height": 400,
        "width": 320,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        980,
        520
      ],
      "typeVersion": 1,
      "id": "5986dc49-cfa2-4762-af44-76662af63894",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "## CRM Agent(Customer lifecycle Automation)",
        "height": 580,
        "width": 2340,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2380,
        280
      ],
      "typeVersion": 1,
      "id": "99f86343-f527-467d-a1bb-2a160c564ee8",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "content": "## IT Agent( Github User Access Provisioning )",
        "height": 240,
        "width": 1340,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1960,
        980
      ],
      "typeVersion": 1,
      "id": "18019f9c-11cc-4c82-acda-199a96e2756a",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "content": "## IT Agent(Github push & Update file)",
        "height": 240,
        "width": 1340,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1960,
        1280
      ],
      "typeVersion": 1,
      "id": "3aa94842-94bb-43f0-82b0-b8f61341bba1",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "content": "## Sun(Coordinator Agent )",
        "height": 440,
        "width": 340
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -20,
        -540
      ],
      "typeVersion": 1,
      "id": "b6e3098a-aa6b-4895-97f4-7aa77eb80a55",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('If').item.json.output.workflow }}",
                    "rightValue": "Employee Onboarding and Offboarding",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3c9c001a-588f-4094-b2c8-ab1b0ed02468"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "0"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2060,
        -2360
      ],
      "id": "5185c543-00fa-4d63-9cc0-a3423e1b9c6a",
      "name": "Switch1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('If').item.json.output.workflow }}",
                    "rightValue": "Performance Review Management",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3c9c001a-588f-4094-b2c8-ab1b0ed02468"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2040,
        -1880
      ],
      "id": "9a612b82-0417-4892-8742-28b25752da08",
      "name": "Switch5"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('If').item.json.output.workflow }}",
                    "rightValue": "Generate Offer Letter",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3c9c001a-588f-4094-b2c8-ab1b0ed02468"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2040,
        -1600
      ],
      "id": "bb2b7e23-b7d2-4bf1-a6aa-e0d7d7e0e95c",
      "name": "Switch6"
    },
    {
      "parameters": {
        "url": "={{ $json.document.preview_url }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3520,
        -1600
      ],
      "id": "01f3e428-e194-49f9-a9cc-618a30dec7b7",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('If1').item.json.output.workflow }}",
                    "rightValue": "SEO Optimization ",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "2d16e7c4-acd6-464d-8e0a-e0e594c791e0"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2120,
        -740
      ],
      "id": "3e95325d-1824-4e43-b043-7f0aab594dff",
      "name": "Switch7"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('If1').item.json.output.workflow }}",
                    "rightValue": "Content Publishing Automation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "2d16e7c4-acd6-464d-8e0a-e0e594c791e0"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2120,
        -1220
      ],
      "id": "ffa74f7e-52ae-4b4f-9571-f2bf008f2867",
      "name": "Switch8"
    },
    {
      "parameters": {
        "jsCode": "const c = items[0].json;\n\n// You can customize these static fields\nconst companyName = \"Orbitx Technologies\";\nconst senderName = \"Aditya Sahoo\";\nconst senderDesignation = \"HR Manager\";\nconst today = new Date().toISOString().split(\"T\")[0];\nconst joiningDate = \"2025-07-01\";\nconst workLocation = \"Hyderabad\";\nconst teamName = \"AI & ML\";\nconst managerName = \"Rahul Menon\";\nconst managerDesignation = \"Director of Engineering\";\nconst offerExpiryDate = \"2025-06-20\";\n\nconst offerLetterHTML = `\n<p><strong>${companyName}</strong></p>\n<p>${today}</p>\n\n<p><strong>Subject: Employment offer from ${companyName}</strong></p>\n\n<p>Dear <em>${c.Name}</em>,</p>\n\n<p>We are pleased to <strong>offer you the position of ${c[\"Role Applied For\"]}</strong> at ${companyName}.</p>\n\n<p>Your annual cost to company is <strong>${c[\"Salary Offered\"]}</strong> [in words]. The breakdown of your gross salary and information specific to employee benefits can be found in Annexure A.</p>\n\n<p>We would like you to start work on <strong>${joiningDate}</strong> from the base location, <strong>${workLocation}</strong>. You will work with the <strong>${teamName}</strong> team and report directly to <strong>${managerName}, ${managerDesignation}</strong>.</p>\n\n<p>If you choose to accept this job offer, please sign and return this letter by <strong>${offerExpiryDate}</strong>. Once we receive your acceptance, we will provide information about onboarding and other asset details.</p>\n\n<p>We are confident that you will find this offer exciting, and I, on behalf of ${companyName}, assure you of a very rewarding career in our organization.</p>\n\n<p>Sincerely, <br>\n${senderName} <br>\n${senderDesignation}, ${companyName}\n</p>\n`;\n\nreturn [{\n  json: {\n    ...c,\n    offer_letter_html: offerLetterHTML,\n    offer_letter_text: offerLetterHTML.replace(/<[^>]+>/g, \"\") // plain text version\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2880,
        -1600
      ],
      "id": "cb4c723c-9577-4cf5-97ca-396d2b616863",
      "name": "Code1"
    },
    {
      "parameters": {
        "functionCode": "\nconst data = $json.data || [];\nconst revenues = data.map(entry => entry.Revenue);\nconst avg = revenues.reduce((a, b) => a + b, 0) / revenues.length;\nreturn [{\n  json: {\n    forecast: avg.toFixed(2),\n    months: revenues.length,\n    latest: data[data.length - 1].Date\n  }\n}];\n"
      },
      "id": "c3c6cc72-5749-426a-8143-da5070708287",
      "name": "Forecast Revenue1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3460,
        -360
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "report",
              "value": "=📊 Revenue Forecast Report\n\nExpected Revenue for Next Month (after {{$json[\"latest\"]}}): ₹{{$json[\"forecast\"]}}\nBased on {{$json[\"months\"]}} historical data points.\n\n\n"
            }
          ]
        },
        "options": {}
      },
      "id": "cfcad215-fd6e-48d4-b561-adc9f2a627a2",
      "name": "Format Report1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        3660,
        -360
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "91277dce-07ab-4abf-8bec-faf4d45e961b",
      "name": "Read Excel File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        2860,
        -360
      ]
    },
    {
      "parameters": {
        "functionCode": "\nreturn items.filter(item => {\n  const rev = item.json.Revenue;\n  return rev !== null && rev !== '' && !isNaN(Number(rev));\n});\n"
      },
      "id": "26f62cde-6c14-4531-af6f-815d98c69bac",
      "name": "Clean Revenue Rows",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3060,
        -360
      ]
    },
    {
      "parameters": {
        "functionCode": "\nreturn [{\n  json: {\n    data: items.map(i => ({\n      Date: i.json.Date,\n      Revenue: Number(i.json.Revenue),\n      Product: i.json.Product,\n      Region: i.json.Region\n    }))\n  }\n}];\n"
      },
      "id": "156b5442-5e0f-40c1-8f04-c0731900eab4",
      "name": "Structure Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3260,
        -360
      ]
    },
    {
      "parameters": {
        "sendTo": "orbitx5613@gmail.com",
        "subject": "Revenue Forecast Report ",
        "message": "=={{$json[\"report\"]}}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3880,
        -360
      ],
      "id": "67da93df-5415-4d70-bc6f-fe799b35a7ba",
      "name": "Gmail4",
      "webhookId": "7618bd24-23f3-4ff1-8149-950e8224cebd",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "613ad4a0-9726-4426-9b48-e85b15cfe7be",
      "name": "Read Customer Excel1",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        2680,
        -160
      ]
    },
    {
      "parameters": {
        "functionCode": "\nreturn items.filter(item => {\n  const val = item.json[\"Purchase Value\"];\n  return val !== null && val !== '' && !isNaN(Number(val));\n});\n"
      },
      "id": "9d1c264b-bd5e-41a4-8b3f-6e0063ed3467",
      "name": "Clean Data1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2880,
        -160
      ]
    },
    {
      "parameters": {
        "functionCode": "\nconst purchases = items;\nconst customers = new Set();\nlet totalValue = 0;\nconst productCount = {};\nconst regionCount = {};\nlet repeatPurchases = 0;\nconst customerVisits = {};\n\npurchases.forEach(p => {\n  const id = p.json.CustomerID;\n  const val = Number(p.json[\"Purchase Value\"]);\n  const product = p.json[\"Product Purchased\"];\n  const region = p.json.Region;\n\n  customers.add(id);\n  totalValue += val;\n\n  productCount[product] = (productCount[product] || 0) + 1;\n  regionCount[region] = (regionCount[region] || 0) + 1;\n\n  customerVisits[id] = (customerVisits[id] || 0) + 1;\n});\n\nObject.values(customerVisits).forEach(visits => {\n  if (visits > 1) repeatPurchases++;\n});\n\nconst topProduct = Object.entries(productCount).reduce((a,b) => a[1] > b[1] ? a : b)[0];\nconst topRegion = Object.entries(regionCount).reduce((a,b) => a[1] > b[1] ? a : b)[0];\nconst repeatRate = (repeatPurchases / customers.size) * 100;\n\nreturn [{\n  json: {\n    totalCustomers: customers.size,\n    avgPurchase: (totalValue / purchases.length).toFixed(2),\n    topProduct: topProduct,\n    topRegion: topRegion,\n    repeatRate: repeatRate.toFixed(2)\n  }\n}];\n"
      },
      "id": "6ea6e393-9489-4be3-bade-0349f48f5d09",
      "name": "Analyze Behavior1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3080,
        -160
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "html",
              "value": "= \"<h1>📊 Customer Analytics Report</h1>\" +\"<p>Total Customers: \" + $json[\\\"totalCustomers\\\"] + \"</p>\" +\"<p>Average Purchase Value: ₹\" + $json[\\\"avgPurchase\\\"] + \"</p>\" +\"<p>Top Product: \" + $json[\\\"topProduct\\\"] + \"</p>\" +\"<p>Top Region: \" + $json[\\\"topRegion\\\"] + \"</p>\" +\"<p>Repeat Purchase Rate: \" + $json[\\\"repeatRate\\\"] + \"%</p>\""
            }
          ]
        },
        "options": {}
      },
      "id": "947de0c5-7833-4811-a153-64a39ff9b724",
      "name": "Build HTML Report1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        3280,
        -160
      ]
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "=https://api.pdfcrowd.com/convert/",
        "responseFormat": "file",
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "={\n  \"src\": \"{{$json['html']}}\"\n}\n"
            }
          ]
        }
      },
      "id": "53ad7075-891f-4bc4-aa6f-7354cc7a98a4",
      "name": "Generate PDF1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3480,
        -160
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "UmWf3BGIUDhUiVJx",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "orbitx5613@gmail.com ",
        "subject": "📊 Monthly Customer Analytics Report",
        "message": "=Hello Team,  Please find attached the latest Customer Analytics Report in PDF format.  This report includes: - Total unique customers - Average purchase value - Top product and region - Repeat purchase rate  If you have any questions or need additional insights, feel free to reply.  Best regards,  ",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3700,
        -160
      ],
      "id": "6d069e06-3aee-436b-be83-d1ef24f7d74a",
      "name": "Gmail5",
      "webhookId": "453a2433-8d3a-40ae-bd57-0dbf36b3bfd4",
      "credentials": {
        "gmailOAuth2": {
          "id": "81dTrgb6UsA7z2vs",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "2d16e7c4-acd6-464d-8e0a-e0e594c791e0"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2320,
        -140
      ],
      "id": "5d173333-3e92-40fe-990d-8eb47e11abc0",
      "name": "Switch2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7ef3c434-3833-41c4-b081-8c49982f7953",
              "leftValue": "={{ $('If4').item.json.output.workflow }}",
              "rightValue": "User Access Provisioning (Github)",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1760,
        1060
      ],
      "id": "e87c6a2f-a65d-4418-bb88-297d72701da4",
      "name": "If13"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7ef3c434-3833-41c4-b081-8c49982f7953",
              "leftValue": "={{ $('If4').item.json.output.workflow }}",
              "rightValue": "Github Push & Update File",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1760,
        1380
      ],
      "id": "df2d2adc-07bc-4977-b2a9-7e3307b45b2a",
      "name": "If14"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "orbitx5613.app.n8n.cloud",
            "user-agent": "python-requests/2.32.4",
            "content-length": "107",
            "accept": "*/*",
            "accept-encoding": "gzip, br",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "183.82.234.154",
            "cf-ew-via": "15",
            "cf-ipcountry": "IN",
            "cf-ray": "95342e7ee5dc2e8b-HYD",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "x-forwarded-for": "183.82.234.154, 172.68.166.137",
            "x-forwarded-host": "orbitx5613.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-87-bcb9f59f7-6frbl",
            "x-is-trusted": "yes",
            "x-real-ip": "183.82.234.154"
          },
          "params": {},
          "query": {},
          "body": {
            "sessionId": "a63a020e-9fde-4adb-a92c-20346271f36c",
            "message": "candidateEmail:\"orbitx5613@gmail.com\""
          },
          "webhookUrl": "https://orbitx5613.app.n8n.cloud/webhook/bc11ea30-2807-4017-8b29-0db9581324e2",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Mistral Cloud Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Sun(Coordinator Agent)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Sun(Coordinator Agent)": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          },
          {
            "node": "If2",
            "type": "main",
            "index": 0
          },
          {
            "node": "If3",
            "type": "main",
            "index": 0
          },
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HR Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Marketing Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "CRM Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Sales & Analytics Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Marketing Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "HR Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "IT Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Sun(Coordinator Agent)",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "HR Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Marketing Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Sales & Analytics Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "CRM Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "IT Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "IT Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CRM Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Sun(Coordinator Agent)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain2": {
      "main": [
        [
          {
            "node": "Slack - Onboard1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gmail - Onboard1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain3": {
      "main": [
        [
          {
            "node": "Slack -Offboard1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gmail OffBoard1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If8": {
      "main": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "HR Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Marketing Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Sales & Analytics Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "CRM Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory4": {
      "ai_memory": [
        [
          {
            "node": "IT Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [],
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets2": {
      "main": [
        [
          {
            "node": "Gmail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail1": {
      "main": [
        [
          {
            "node": "Wait 7 Days1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 7 Days1": {
      "main": [
        [
          {
            "node": "Google Sheets3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets3": {
      "main": [
        [
          {
            "node": "If Response Submitted1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Response Submitted1": {
      "main": [
        [
          {
            "node": "Notify employee1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notify HR - Missing Review1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Google Sheets2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook2": {
      "main": [
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook1": {
      "main": [
        [
          {
            "node": "Switch8",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch8",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields": {
      "main": [
        [
          {
            "node": "If8",
            "type": "main",
            "index": 0
          },
          {
            "node": "If5",
            "type": "main",
            "index": 0
          },
          {
            "node": "If6",
            "type": "main",
            "index": 0
          },
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract fields": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields2": {
      "main": [
        [
          {
            "node": "Google Sheets1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If9": {
      "main": [
        [
          {
            "node": "Twitter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "HTML Parser Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Parser Code1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Processing1": {
      "main": [
        [
          {
            "node": "Google Sheets4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Data Processing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets4": {
      "main": [
        [
          {
            "node": "Gmail2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail2": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If11": {
      "main": [
        [
          {
            "node": "Reddit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If10": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reddit1": {
      "main": [
        [
          {
            "node": "Slack1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram1": {
      "main": [
        [
          {
            "node": "Slack1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets(To log updated value)1": {
      "main": [
        [
          {
            "node": "Checks Social media platform1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checks Social media platform1": {
      "main": [
        [
          {
            "node": "If11",
            "type": "main",
            "index": 0
          },
          {
            "node": "If9",
            "type": "main",
            "index": 0
          },
          {
            "node": "If10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "Google Sheets(To log updated value)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twitter1": {
      "main": [
        [
          {
            "node": "Slack1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook3": {
      "main": [
        [],
        [
          {
            "node": "Extract Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Customer Details1": {
      "main": [
        [
          {
            "node": "Greetings mail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Greetings mail1": {
      "main": [
        [
          {
            "node": "If12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ChatBot1": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ChatBot Response1": {
      "main": [
        [
          {
            "node": "Slack2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 3 days1": {
      "main": [
        [
          {
            "node": "Follow up mail (3days)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 7 days1": {
      "main": [
        [
          {
            "node": "Follow up mail (7 days)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow up mail (3days)1": {
      "main": [
        [
          {
            "node": "Slack2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow up mail (7 days)1": {
      "main": [
        [
          {
            "node": "Slack2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If12": {
      "main": [
        [
          {
            "node": "ChatBot1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait 3 days1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait 7 days1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "ChatBot1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "ChatBot Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook4": {
      "main": [
        [
          {
            "node": "If13",
            "type": "main",
            "index": 0
          },
          {
            "node": "If14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If13",
            "type": "main",
            "index": 0
          },
          {
            "node": "If14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields5": {
      "main": [
        [
          {
            "node": "Customer Details1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add GitHub Collaborator1": {
      "main": [
        [
          {
            "node": "Gmail3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets5": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Add GitHub Collaborator1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail3": {
      "main": [
        [
          {
            "node": "Slack3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields6": {
      "main": [
        [
          {
            "node": "Google Sheets5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "config1": {
      "main": [
        [
          {
            "node": "GitHub get file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub get file1": {
      "main": [
        [
          {
            "node": "Decode file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode file1": {
      "main": [
        [
          {
            "node": "GitHub push edited file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields7": {
      "main": [
        [
          {
            "node": "config1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sales & Analytics Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Extract Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch5": {
      "main": [
        [
          {
            "node": "Extract fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch6": {
      "main": [
        [
          {
            "node": "Extract Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields3": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch8": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch7": {
      "main": [
        [
          {
            "node": "Extract Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Forecast Revenue1": {
      "main": [
        [
          {
            "node": "Format Report1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Report1": {
      "main": [
        [
          {
            "node": "Gmail4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Excel File": {
      "main": [
        [
          {
            "node": "Clean Revenue Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Revenue Rows": {
      "main": [
        [
          {
            "node": "Structure Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structure Output": {
      "main": [
        [
          {
            "node": "Forecast Revenue1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Fields4": {
      "main": [
        [
          {
            "node": "Read Excel File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Customer Excel1": {
      "main": [
        [
          {
            "node": "Clean Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Data1": {
      "main": [
        [
          {
            "node": "Analyze Behavior1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Behavior1": {
      "main": [
        [
          {
            "node": "Build HTML Report1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build HTML Report1": {
      "main": [
        [
          {
            "node": "Generate PDF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate PDF1": {
      "main": [
        [
          {
            "node": "Gmail5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Read Customer Excel1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If14": {
      "main": [
        [
          {
            "node": "Extract Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If13": {
      "main": [
        [
          {
            "node": "Extract Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2d0a9495-7043-4172-af4c-2c8bc60c0522",
  "meta": {
    "workflow_name": "Sun Agent IWO",
    "description": "The Sun Agent IWO is an intelligent multi-agent orchestration workflow that uses a Coordinator Agent with a Think Tool to classify user requests and route them to specialized domain agents for HR, Marketing, CRM, Sales, and IT. It guarantees session continuity and dynamic data validation, ensuring every user request is handled by the right sub-agent with no context loss.",
    "purpose": "To automate complex multi-step requests by delegating tasks to the appropriate agent based on classification, while remembering context across multiple user inputs within a session.",
    "agents": {
      "Coordinator Agent": "The central brain of the system. Uses the Think Tool to classify user intent, check session memory, and decide which specialized agent and workflow to invoke.",
      "HR Agent": "Handles workflows related to Employee Onboarding and Offboarding, Offer Letter generation, and Performance Review Management. It checks for required fields, prompts for missing info, parses and validates user input, and finalizes HR tasks.",
      "Marketing Agent": "Manages workflows like Social Media posts, Content Creation, SEO, Analytics, and Digital Marketing tasks. It can automate publishing and reporting actions.",
      "CRM Agent": "Handles Customer Lifecycle Automation, Customer Support tickets, and Support Ticket Management. It ensures that client issues are logged, assigned, and tracked properly.",
      "Sales Agent": "Manages workflows for Sales & Revenue Forecasting, Sales Reporting, and Customer Analytics. It helps automate sales insights and pipeline updates.",
      "IT Agent": "Performs IT-related tasks like Github Push & Update File operations and User Access Provisioning. It ensures proper version control actions and permission changes are processed automatically."
    },
    "steps": [
      "1️⃣ Receive the user's message through a webhook with session ID.",
      "2️⃣ Coordinator Agent uses the Think Tool to analyze message + session context.",
      "3️⃣ Classify the intent and pick the exact workflow.",
      "4️⃣ Route the request to the correct specialized agent branch.",
      "5️⃣ Specialized agent checks for required fields; prompts if needed.",
      "6️⃣ User replies with missing fields; parser extracts & validates.",
      "7️⃣ Specialized agent executes the workflow logic.",
      "8️⃣ Send confirmation back to the frontend via Respond to Webhook.",
      "🔁 Loop continues within the session for follow-ups or new requests."
    ],
    "usage_notes": "Always ensure your frontend keeps the same session ID for each user chat. Each agent prompt must strictly follow the pattern: check memory first, decide if more fields are needed, then proceed. Never switch workflows mid-session unless the user requests it explicitly.",
    "tags": [
      "multi-agent orchestration",
      "session memory",
      "Think Tool",
      "LangChain integration",
      "n8n AI router",
      "HR automation",
      "CRM support",
      "Marketing automation",
      "Sales reporting",
      "IT workflow",
      "dynamic prompting",
      "field parser",
      "auto-validation"
    ],
    "templateCredsSetupCompleted": true,
    "instanceId": "c2ddce833599e9b4aa840076a3a8a143c91ada4c78121148acc12f9ebfe54976"
  },
  "id": "nKYoSmwqzOUoD75D",
  "tags": []
}